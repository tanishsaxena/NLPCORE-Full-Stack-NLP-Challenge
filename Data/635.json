{"title": "APL (programming language)", "authors": ["InternetArchiveBot"], "time_published": "2020-01-22T16:56:51Z", "sections": [{"title": "", "paragraphs": "{{distinguish |Address programming language}}\n{{short description|Programming language}}\n{{infobox programming language\n| name                   = APL\n| paradigm               = [[Array programming|Array]], [[Functional programming|functional]], [[Structured programming|structured]], [[Modular programming|modular]]\n| year                   = {{Start date and age|1966|11|27}}<ref name=\"Birthdate\"/>\n| designer               = [[Kenneth E. Iverson]]\n| developer              = [[Lawrence M. Breed|Larry Breed]], [[Richard H. Lathwell|Dick Lathwell]], [[Roger Moore (computer scientist)|Roger Moore]] and others\n| latest release version = ISO/IEC 13751:2001\n| latest release date    = {{Start date and age|2001|02|01}}\n| typing                 = [[Type system|Dynamic]]\n| platform               = [[Cross platform]]\n| license                = [[Proprietary software|Proprietary]], [[Open-source software|open source]]\n| implementations        = {{startflatlist}}\n*APL\\360\n*APL\\1130\n*APL*Plus\n*Sharp APL\n*APL2\n*Dyalog APL\n*NARS2000\n*[[APLX]]\n*GNU APL\n{{endflatlist}}\n| influenced by          = [[Mathematical notation]]\n| influenced             = \n{{startflatlist}}\n* [[A+ (programming language)|A and A+]]\n* [[FP (programming language)|FP]]\n* [[J (programming language)|J]]\n* [[K (programming language)|K]]\n* [[LYaPAS]]\n* [[MATLAB]]\n* [[Nial]]\n* [[Polymorphic Programming Language|PPL]]\n* [[S (programming language)|S]]\n* [[Speakeasy (computational environment)|Speakeasy]]\n* [[Wolfram Language]]\n{{endflatlist}}\n}}\n{{APLcode}}\n\n'''APL''' (named after the book ''A Programming Language'')<ref name=\"aplbook\">{{cite book |last=Iverson |first=Kenneth E. |author-link=Kenneth E. Iverson |title=A Programming Language |publisher=Wiley |year=1962 |isbn=978-0-471-43014-8 |url=http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view |access-date=2014-10-27 |archive-url=https://web.archive.org/web/20141027152546/http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view |archive-date=2014-10-27 |url-status=dead }}</ref> is a [[programming language]] developed in the 1960s by [[Kenneth E. Iverson]]. Its central datatype is the [[Array data type#Multi-dimensional arrays|multidimensional array]]. It uses a large range of [[APL syntax and symbols|special graphic symbols]]<ref>{{cite journal|last1=McIntyre|first1=Donald B.|title=Language as an Intellectual Tool: From Hieroglyphics to APL|journal=IBM Systems Journal|date=1991|volume=30|issue=4|pages=554\u2013581|doi=10.1147/sj.304.0554|url=http://domino.research.ibm.com/tchjr/journalindex.nsf/e90fc5d047e64ebf85256bc80066919c/9c834f5a16efa82085256bfa00685c72!OpenDocument|access-date=January 9, 2015|archive-url=https://web.archive.org/web/20160304051735/http://domino.research.ibm.com/tchjr/journalindex.nsf/e90fc5d047e64ebf85256bc80066919c/9c834f5a16efa82085256bfa00685c72!OpenDocument|archive-date=March 4, 2016|url-status=dead}}</ref> to represent most functions and operators, leading to very concise code. It has been an important influence on the development of concept modeling, [[spreadsheet]]s, [[functional programming]],<ref>{{cite web |url=http://awards.acm.org/citation.cfm?id=0703524&srt=all&aw=140&ao=AMTURING |archive-url=https://web.archive.org/web/20080212043802/https://awards.acm.org/citation.cfm?id=0703524&srt=all&aw=140&ao=AMTURING |archive-date=February 12, 2008 |title=ACM Award Citation&nbsp;\u2013 John Backus |publisher=Awards.acm.org |date= 1977 |access-date=February 3, 2010}}</ref> and computer math packages.<ref name=\"mworks\" /> It has also inspired several other programming languages.<ref name=\"jinsp\" /><ref name=\"kinsp\" />\n\n", "attributes": [{"name": "distinguish ", "values": [{"name": "1", "value": "Address programming language"}]}, {"name": "short description", "values": [{"name": "1", "value": "Programming language"}]}, {"name": "infobox programming language\n", "values": [{"name": "name", "value": "APL"}, {"name": "paradigm", "value": "[[Array programming|Array]], [[Functional programming|functional]], [[Structured programming|structured]], [[Modular programming|modular]]"}, {"name": "year", "value": "{{Start date and age|1966|11|27}}<ref name=\"Birthdate\"/>"}, {"name": "designer", "value": "[[Kenneth E. Iverson]]"}, {"name": "developer", "value": "[[Lawrence M. Breed|Larry Breed]], [[Richard H. Lathwell|Dick Lathwell]], [[Roger Moore (computer scientist)|Roger Moore]] and others"}, {"name": "latest release version", "value": "ISO/IEC 13751:2001"}, {"name": "latest release date", "value": "{{Start date and age|2001|02|01}}"}, {"name": "typing", "value": "[[Type system|Dynamic]]"}, {"name": "platform", "value": "[[Cross platform]]"}, {"name": "license", "value": "[[Proprietary software|Proprietary]], [[Open-source software|open source]]"}, {"name": "implementations", "value": "{{startflatlist}}\n*APL\\360\n*APL\\1130\n*APL*Plus\n*Sharp APL\n*APL2\n*Dyalog APL\n*NARS2000\n*[[APLX]]\n*GNU APL\n{{endflatlist}}"}, {"name": "influenced by", "value": "[[Mathematical notation]]"}, {"name": "influenced", "value": "{{startflatlist}}\n* [[A+ (programming language)|A and A+]]\n* [[FP (programming language)|FP]]\n* [[J (programming language)|J]]\n* [[K (programming language)|K]]\n* [[LYaPAS]]\n* [[MATLAB]]\n* [[Nial]]\n* [[Polymorphic Programming Language|PPL]]\n* [[S (programming language)|S]]\n* [[Speakeasy (computational environment)|Speakeasy]]\n* [[Wolfram Language]]\n{{endflatlist}}"}]}, {"name": "Start date and age", "values": [{"name": "1", "value": "1966"}, {"name": "2", "value": "11"}, {"name": "3", "value": "27"}]}, {"name": "Start date and age", "values": [{"name": "1", "value": "2001"}, {"name": "2", "value": "02"}, {"name": "3", "value": "01"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Iverson"}, {"name": "first", "value": "Kenneth E."}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "title", "value": "A Programming Language"}, {"name": "publisher", "value": "Wiley"}, {"name": "year", "value": "1962"}, {"name": "isbn", "value": "978-0-471-43014-8"}, {"name": "url", "value": "http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view"}, {"name": "access-date", "value": "2014-10-27"}, {"name": "archive-url", "value": "https://web.archive.org/web/20141027152546/http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view"}, {"name": "archive-date", "value": "2014-10-27"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "McIntyre"}, {"name": "first1", "value": "Donald B."}, {"name": "title", "value": "Language as an Intellectual Tool: From Hieroglyphics to APL"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "date", "value": "1991"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "554\u2013581"}, {"name": "doi", "value": "10.1147/sj.304.0554"}, {"name": "url", "value": "http://domino.research.ibm.com/tchjr/journalindex.nsf/e90fc5d047e64ebf85256bc80066919c/9c834f5a16efa82085256bfa00685c72!OpenDocument"}, {"name": "access-date", "value": "January 9, 2015"}, {"name": "archive-url", "value": "https://web.archive.org/web/20160304051735/http://domino.research.ibm.com/tchjr/journalindex.nsf/e90fc5d047e64ebf85256bc80066919c/9c834f5a16efa82085256bfa00685c72!OpenDocument"}, {"name": "archive-date", "value": "March 4, 2016"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://awards.acm.org/citation.cfm?id=0703524&srt=all&aw=140&ao=AMTURING"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080212043802/https://awards.acm.org/citation.cfm?id=0703524&srt=all&aw=140&ao=AMTURING"}, {"name": "archive-date", "value": "February 12, 2008"}, {"name": "title", "value": "ACM Award Citation&nbsp;\u2013 John Backus"}, {"name": "publisher", "value": "Awards.acm.org"}, {"name": "date", "value": "1977"}, {"name": "access-date", "value": "February 3, 2010"}]}], "id": 0}, {"title": " History ", "paragraphs": "=== Mathematical notation===\nA [[mathematical notation]] for manipulating arrays was developed by [[Kenneth E. Iverson]], starting in 1957 at [[Harvard University]]. In 1960, he began work for [[IBM]] where he developed this notation with [[Adin Falkoff]] and published it in his book ''A Programming Language'' in 1962.<ref name=\"aplbook\" /> The preface states its premise:\n{{quote|Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or ''programs''. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a ''programming language''.\n}}\n\nThis notation was used inside IBM for short research reports on computer systems, such as the [[Burroughs B5000]] and its stack mechanism when [[stack machine]]s versus [[register machine]]s were being evaluated by IBM for upcoming computers.\n\nIverson also used his notation in a draft of the chapter ''A Programming Language'', written for a book he was writing with [[Fred Brooks]], ''Automatic Data Processing'', which would be published in 1963.<ref>Iverson, Kenneth E., [http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view \"Automatic Data Processing: Chapter 6: A programming language\"] {{webarchive|url=https://web.archive.org/web/20090604091847/http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view |date=June 4, 2009}}, 1960, Draft copy for Brooks and Iverson 1963 book, ''Automatic Data Processing''.</ref><ref>[[Fred Brooks|Brooks, Fred]]; Iverson, Kenneth, (1963), ''Automatic Data Processing'', John Wiley & Sons Inc.</ref>\n\nIn 1979, Iverson received the [[Turing Award]] for his work on APL.<ref>{{cite web |url=http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING |title=Turing Award Citation 1979 |publisher=Awards.acm.org |access-date=February 3, 2010 |archive-url=https://web.archive.org/web/20091223064709/http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING |archive-date=2009-12-23 |url-status=dead }}</ref>\n\n=== Development into a computer programming language ===\nAs early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with William C. Carter his work to standardize the instruction set for the machines that later became the [[IBM System/360]] family.\n\nIn 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an [[IBM 1620]] computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a part of the notation was called Personalized Array Translator (PAT).<ref>Hellerman, H., \"Experimental Personalized Array Translator System\", ''Communications of the ACM'', 7, 433 (July, 1964).</ref>\n\nIn 1963, Falkoff, Iverson, and [[Edward H. Sussenguth Jr.]], all working at IBM, used the notation for a formal description of the [[IBM System/360]] series machine architecture and functionality, which resulted in a paper published in ''[[IBM Systems Journal]]'' in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with [[Science Research Associates]], an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help use the language as a tool to develop and use computers in education.<ref>Falkoff, Adin D.; Iverson, Kenneth E., [http://www.jsoftware.com/papers/APLEvol.htm \"The Evolution of APL\"], ACM SIGPLAN Notices 13, 1978-08.</ref>\n\nAfter [[Lawrence M. Breed]] and [[Philip S. Abrams]] of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in [[FORTRAN IV]] for a part of the notation which had been done for the [[IBM 7090]] computer running on the [[IBM 7090/94 IBSYS|IBSYS]] operating system. This work was finished in late 1965 and later named IVSYS (for Iverson system). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, \"An Interpreter for Iverson Notation\" in 1966, the academic aspect of this was formally supervised by [[Niklaus Wirth]].<ref>Abrams, Philip S., [http://infolab.stanford.edu/TR/CS-TR-66-47.html ''An interpreter for \"Iverson notation\"''], Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966;</ref> Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a [[time-sharing]] system and, by November 1966, it had been reprogrammed for the [[IBM System/360 Model 50]] computer running in a time sharing mode and was used internally at IBM.<ref>{{cite journal |last=Haigh |first=Thomas |year=2005 |title=Biographies: Kenneth E. Iverson |journal=IEEE Annals of the History of Computing|doi=10.1109/MAHC.2005.4 }}</ref>\n\n=== Hardware ===\n[[File:IBM Selectric Globe Wiki.jpg|thumb|IBM typeballs (one OCR) with clip, {{\u20ac|2}} coin for scale]]\n\n[[File:APL-keybd2.svg|thumb|A programmer's view of the IBM 2741 keyboard layout with the APL typing element print head inserted]]\n\nA key development in the ability to use APL effectively, before the wide use of cathode ray tube ([[Computer monitor#Cathode ray tube|CRT]]) terminals, was the development of a special [[IBM Selectric typewriter]] interchangeable typing element with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typing element mechanism, such as the [[IBM 1050]] and [[IBM 2741]] terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could type in and see proper APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typing elements, 987 and 988, designed in late 1964, although no APL computer system was available to use them.<ref name=\"APLQQ91\">Breed, Larry, [http://portal.acm.org/citation.cfm?id=138094.140933 \"The First APL Terminal Session\"], ''APL Quote Quad'', Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4.</ref> Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typing element for the APL character set.<ref>[http://www.computerhistory.org/tdih/?setdate=December 19, 2009 Adin Falkoff] \u2013 Computer History Museum. \"Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs.\"</ref>\n\nMany APL symbols, even with the APL characters on the Selectric typing element, still had to be typed in by over-striking two extant element characters. An example is the ''grade up'' character, which had to be made from a ''delta'' (shift-H) and a ''[[Sheffer stroke]]'' (shift-M). This was necessary because the APL character set was much larger than the 88 characters allowed on the typing element, even when letters were restricted to upper-case (capitals).\n\n=== Commercial availability ===\nThe first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near [[Thomas J. Watson Research Center]], the home of APL, in [[Yorktown Heights, New York]].<ref name=\"APLQQ91\"/>\n\nIBM was chiefly responsible for introducing APL to the marketplace. APL was first available in 1967 for the [[IBM 1130]] as ''APL\\1130''.<ref>{{cite journal |url=http://www.vector.org.uk/archive/v223/APL_1130.htm |title=How We Got to APL\\1130 |last=Breed |first=Larry |author-link=Larry Breed |journal=Vector (British APL Association) |volume=22 |issue=3 |date=August 2006 |issn=0955-1433 |access-date=2007-04-02 |archive-url=https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm |archive-date=2008-05-12 |url-status=dead }}</ref><ref>[http://bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf APL\\1130 Manual] {{Webarchive|url=https://web.archive.org/web/20110221034650/http://www.bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf |date=2011-02-21 }}, May 1969</ref> It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk.\n\nAPL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would support multiple users on lower-specification systems that had no [[Memory management unit|dynamic address translation]] hardware.<ref>{{cite web|url=http://www.quadibloc.com/comp/aplint.htm |title=Remembering APL |publisher=Quadibloc.com |date= |access-date=June 17, 2013}}</ref> Additional improvements in performance for selected [[IBM System/370]] mainframe systems included the ''APL Assist Microcode'' in which some support for APL execution was included in the processor's [[firmware]], as distinct from being implemented entirely by higher-level software. Somewhat later, as suitably performing hardware was finally growing available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.\n\nEarly IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were their own timesharing systems. First introduced in 1966, the ''APL\\360''<ref name=\"IBM APL\\360 1968\">Falkoff, Adin; Iverson, Kenneth E., [http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf \"APL\\360 Users Guide\"] {{Webarchive|url=https://web.archive.org/web/20120229200744/http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf |date=2012-02-29 }}, IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968.</ref><ref>[http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf \"APL\\360 Terminal System\"] {{Webarchive|url=https://web.archive.org/web/20100711092528/http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf |date=2010-07-11 }}, IBM Research, Thomas J. Watson Research Center, March 1967.</ref><ref name=\"apl360\">{{cite book |last=Pakin |first=Sandra |title=APL\\360 Reference Manual |publisher=Science Research Associates, Inc. |year=1968 |isbn=978-0-574-16135-2}}</ref> system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged \"I-beam\" functions, using both [[Monad (functional programming)|monadic]] and [[Dyadics|dyadic]] operations.<ref>Falkoff, Adin D.; Iverson, Kenneth E.,[http://www.research.ibm.com/journal/rd/174/ibmrd1704F.pdf ''The Design of APL''], ''IBM Journal of Research and Development'', Volume 17, Number 4, July 1973. \"These environmental defined functions were based on the use of still another class of functions\u2014called \"I-beams\" because of the shape of the symbol used for them\u2014which provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day.\"</ref>\n\nIn 1973, IBM released ''APL.SV'', which was a continuation of the same product, but which offered [[shared variable]]s as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the [[IBM 5100]] desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered [[BASIC]]. In the 1980s, the ''VSAPL'' program product enjoyed wide use with [[Conversational Monitor System]] (CMS), [[Time Sharing Option]] (TSO), [[VSPC]], [[MUSIC/SP]], and [[CICS]] users.\n\nIn 1973-1974, Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the 1100 line of the Sperry [[UNIVAC 1100/2200 series]] mainframe computers.<ref>{{cite web |last=Minker |first=Jack |title=Beginning of Computing and Computer Sciences at the University of Maryland |url=http://www.cs.umd.edu/department/dept-history/minker-report.pdf |publisher=University of Maryland |access-date=May 23, 2011 |location=Section 2.3.4 |page=38 |date=January 2004 |archive-url= https://web.archive.org/web/20110610064807/http://www.cs.umd.edu/department/dept-history/minker-report.pdf |archive-date= June 10, 2011}}</ref> At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.<ref>{{cite web |last=Stebbens |first=Alan |title=How it all began |url=http://lathwellproductions.ca/wordpress/film}}</ref> Xerox APL was available from June 1975 for Xerox 560 and Sigma 6, 7, and 9 mainframes running [[Universal_Time-Sharing_System#CP-V | CP-V]] and for [[Honeywell CP-6]].<ref>{{cite web |title=Xerox APL Language and Operations Reference Manual |url=http://www.softwarepreservation.org/projects/apl/Books/197506_Xerox%20APL%20Language%20and%20Operations%20Reference%20Manual_90131C.pdf}}</ref>\n\nIn the 1960s and 1970s, several timesharing firms arose that sold APL services using modified versions of the IBM APL\\360<ref name=\"apl360\" /> interpreter. In North America, the better-known ones were [[I. P. Sharp Associates]], [[Scientific Time Sharing Corporation]] (STSC), Time Sharing Resources (TSR), and [[The Computer Company]] (TCC). CompuServe also entered the market in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's, which ran on DEC's KI and KL 36-bit machines. CompuServe's APL was available both to its commercial market and the consumer information service.  With the advent first of less expensive mainframes such as the [[IBM 4300]], and later the personal computer, by the mid-1980s, the timesharing industry was all but gone.\n\n''Sharp APL'' was available from [[I. P. Sharp Associates]], first as a timesharing service in the 1960s, and later as a program product starting around 1979. ''Sharp APL'' was an advanced APL implementation with many language extensions, such as ''packages'' (the ability to put one or more objects into a single variable), file system, nested arrays, and [[shared variable]]s.\n\nAPL interpreters were available from other mainframe and mini-computer manufacturers also, notably [[Burroughs Corporation|Burroughs]], [[Control Data Corporation]] (CDC), [[Data General]], [[Digital Equipment Corporation]] (DEC), [[Harris Corporation|Harris]], [[Hewlett-Packard]] (HP), [[Siemens AG]], [[Xerox]], and others.\n\nGarth Foster of [[Syracuse University]] sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in [[Blue Mountain Lake, New York]]. In later years, Eugene McDonnell organized similar meetings at the [[Asilomar Conference Grounds]] near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the [[Association for Computing Machinery]] continues to support the APL community.<ref>{{cite web |url=http://www.sigapl.org/ |title=SIGAPL |publisher=Sigapl.org |date= |access-date=June 17, 2013}}</ref>\n\n=== Microcomputers ===\nOn microcomputers, which became available from the mid 1970s onwards, [[BASIC]] became the dominant programming language.<ref>{{cite web|url=http://time.com/69316/basic/|title=Fifty Years of BASIC, the Programming Language That Made Computers Personal|date=April 29, 2014|website=time.com|publisher=TIME|access-date=April 29, 2018}}</ref> Nevertheless, some microcomputers provided APL instead - the first being the [[Intel 8008]]-based [[MCM/70]] which was released in 1974<ref>{{cite web|url=http://www.old-computers.com/museum/computer.asp?c=346|title=MCM Computers M70/M700|website=old-computers.com|access-date=April 8, 2018|archive-url=https://web.archive.org/web/20180403063223/http://www.old-computers.com/museum/computer.asp?c=346|archive-date=April 3, 2018|url-status=dead}}</ref><ref>{{cite book|last=Stachniak|first=Stachniak |date=2011|title=Inventing the PC: The MCM/70 Story|publisher=McGill Queens's University Press |isbn=978-0-7735-3852-8|url=https://books.google.co.uk/books?id=cyWOA2FED7EC}}</ref> and which was primarily used in education.<ref>{{cite magazine |last=Miller |first=Michael |date=December 17, 2014 |title=PCs That Paved the Way for the Altair |url=http://uk.pcmag.com/opinion/38348/opinion/pcs-that-paved-the-way-for-the-altair |magazine=PCMagazine |publisher=Ziff Davis |access-date=April 29, 2018 }}</ref> Another machine of this time was the [[VideoBrain Family Computer]], released in 1977, which was supplied with its dialect of APL called APL/S.<ref>[https://books.google.com/books?id=OQEAAAAAMBAJ&pg=PA133&lpg=PA133&dq=videobrain+family+computer+apl/s#v=onepage&q=videobrain%20family%20computer%20apl%2Fs \"VideoBrain Family Computer\"], ''[[Popular Science]]'', November 1978, advertisement.</ref>\n\nThe [[Commodore SuperPET]], introduced in 1981, included an APL interpreter developed by the [[University of Waterloo]].<ref>{{cite magazine |date=December 1981 |title=A Look at SuperPet |url=https://archive.org/stream/1981-12-compute-magazine/Compute_Issue_019_1981_Dec#page/n131/mode/2up |magazine=COMPUTE! The Journal for Progressive Computing |location= |publisher=Small System Services Inc |access-date=April 29, 2018 }}</ref>\n\nIn 1976, Bill Gates claimed in his [[Open Letter to Hobbyists]] that [[Microsoft Corporation]] was implementing APL for the [[Intel 8080]] and [[Motorola 6800]] but had \"very little incentive to make [it] available to hobbyists\" because of [[software piracy]].<ref>{{cite magazine |last=Gates |first=Bill |date=January 31, 1976 |title=An Open Letter to Hobbyists |url=http://www.digibarn.com/collections/newsletters/homebrew/V2_01/index.html |magazine=Homebrew Computer Club Newsletter |access-date=April 29, 2018}}</ref> It was never released.\n\n=== APL2 ===\nStarting in the early 1980s, IBM APL development, under the leadership of [[Jim Brown (computer scientist)|Jim Brown]], implemented a new version of the APL language that contained as its primary enhancement the concept of ''nested arrays'', where an array can contain other arrays, and new language features which facilitated integrating nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined [[I. P. Sharp Associates]], where one of his major contributions was directing the evolution of Sharp APL to be more in accord with his vision.<ref>{{cite web |last1=Hui |first1=Roger |title=Remembering Ken Iverson |url=http://keiapl.org/rhui/remember.htm|website=keiapl.org|publisher=KEIAPL |access-date=January 10, 2015}}</ref><ref>{{cite web |last1=ACM A.M. Turing Award |title=Kenneth E. Iverson \u2013 Citation |url=http://amturing.acm.org/award_winners/iverson_9147499.cfm |website=amturing.acm.org|publisher=ACM |access-date=January 10, 2015}}</ref><ref>{{cite web |last1=ACM SIGPLAN |title=APL2: The Early Years |url=http://www.sigapl.org/Articles/JimBrown-TechCompromise.php |website=www.sigapl.org|publisher=ACM |access-date=January 10, 2015}}</ref>\n\nAs other vendors were busy developing APL interpreters for new hardware, notably [[Unix]]-based [[microcomputer]]s, APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.<ref>{{cite web|last1=Micro APL|title=Overview of the APL System|url=http://www.microapl.co.uk/apl/apl_concepts_chapter1.html|website=www.microapl.co.uk|publisher=Micro APL|access-date=January 10, 2015}}</ref><ref>{{cite web|last1=Robertson|first1=Graeme|title=A Personal View of APL2010|url=http://archive.vector.org.uk/art10500450|website=archive.vector.org.uk|publisher=Vector \u2013 Journal of the British APL Association|access-date=January 10, 2015}}</ref>\n\n''APL2'' for IBM mainframe computers is still available.  IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,<ref>{{cite journal|last1=Rodriguez|first1=P.|last2=Rojas|first2=J.|last3=Alfonseca|first3=M.|last4=Burgos|first4=J. I.|title=An Expert System in Chemical Synthesis written in APL2/PC|journal=ACM SIGAPL APL Quote Quad|date=1989|volume=19|issue=4|pages=299\u2013303|doi=10.1145/75144.75185}}</ref> for teaching mathematics and other subjects, visualization and database access<ref>{{cite web|last1=IBM|title=APL2: A Programming Language for Problem Solving, Visualization and Database Access|url=http://www-03.ibm.com/software/products/en/apl2|website=www-03.ibm.com|publisher=IBM|access-date=January 10, 2015}}</ref> and was first available for [[Conversational Monitor System|CMS]] and [[Time Sharing Option|TSO]] in 1984.<ref name=\"FalkoffIBMFamily\">{{cite journal |url=https://pdfs.semanticscholar.org/f7c4/72cdf7f4cb57d34c08d09f6c9a5340372678.pdf|title=The IBM family of APL systems |first=Adin D. |last=Falkoff |year=1991 |journal=IBM Systems Journal |volume=30 |issue=4 |pages=416\u2013432 |access-date=April 15, 2018 |doi=10.1147/sj.304.0416}}</ref> The APL2 Workstation edition (Windows, [[OS/2]], [[IBM AIX|AIX]], [[Linux]], and [[Solaris (operating system)|Solaris]]) followed much later in the early 1990s.{{Citation needed|date=April 2010}}\n\n=== Modern implementations ===\nVarious implementations of APL by APLX, Dyalog, et al., include extensions for [[object-oriented programming]], support for [[.NET Framework]], XML-array conversion primitives, graphing, operating system interfaces, and [[lambda calculus]] expressions.\n\n=== Derivative languages ===\nAPL has formed the basis of, or influenced, the following languages:\n\n* [[A+ (programming language)|A and A+]], an alternative APL, the latter with graphical extensions.\n* [[FP (programming language)|FP]], a functional programming language.\n*Ivy, an interpreter for an APL-like language developed by [[Rob Pike]], and which uses [[ASCII]] as input.<ref>{{Cite web|url=https://godoc.org/robpike.io/ivy|title=Ivy|last=Pike|first=Rob|date=2018-03-25|website=GoDoc|archive-url=https://web.archive.org/web/20190813210651/https://godoc.org/robpike.io/ivy|archive-date=2019-08-13|url-status=}}</ref>\n* [[J (programming language)|J]], which was also designed by Iverson, and which uses [[ASCII]] with [[Digraph (computing)|digraphs]] instead of special symbols.<ref name=\"jinsp\">{{cite web |url=http://www.jsoftware.com/jwiki/Essays/Bibliography |title=A Bibliography of APL and J |publisher=Jsoftware.com |date= |access-date=March 2, 2010}}</ref>\n* [[K (programming language)|K]], a proprietary variant of APL developed by Arthur Whitney.<ref name=\"kinsp\">{{cite web |url=http://kx.com/Company/press-releases/arthur-interview.php |title=An Interview with Arthur Whitney |publisher=Kx Systems |date=January 4, 2004 |access-date=March 2, 2010 |url-status=dead |archive-url=https://web.archive.org/web/20090404064737/http://kx.com/Company/press-releases/arthur-interview.php |archive-date=April 4, 2009}}</ref>\n* [[LYaPAS]], a [[Soviet Union|Russian]] extension to APL.\n* [[MATLAB]], a numerical computation tool.<ref name=\"mworks\">{{cite web |url=http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf |title=The Growth of MATLAB |last=Moler |first=Cleve |access-date=February 3, 2010 |url-status=dead |archive-url=https://web.archive.org/web/20090411120119/http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf |archive-date=April 11, 2009 }}</ref>\n* [[Nial]], a high-level array programming language with a functional programming notation.\n* [[Polymorphic Programming Language]], an interactive, extensible language with a similar base language.\n* [[S (programming language)|S]], a statistical programming language.\n* [[Speakeasy (computational environment)|Speakeasy]], a numerical computing interactive environment.\n* [[Wolfram Language]], the programming language of [[Mathematica]].\n\n", "attributes": [{"name": "quote", "values": [{"name": "1", "value": "Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or ''programs''. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a ''programming language''."}]}, {"name": "webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20090604091847/http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view"}, {"name": "date", "value": "June 4, 2009"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING"}, {"name": "title", "value": "Turing Award Citation 1979"}, {"name": "publisher", "value": "Awards.acm.org"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "archive-url", "value": "https://web.archive.org/web/20091223064709/http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING"}, {"name": "archive-date", "value": "2009-12-23"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite journal ", "values": [{"name": "last", "value": "Haigh"}, {"name": "first", "value": "Thomas"}, {"name": "year", "value": "2005"}, {"name": "title", "value": "Biographies: Kenneth E. Iverson"}, {"name": "journal", "value": "IEEE Annals of the History of Computing"}, {"name": "doi", "value": "10.1109/MAHC.2005.4"}]}, {"name": "\u20ac", "values": [{"name": "1", "value": "2"}]}, {"name": "cite journal ", "values": [{"name": "url", "value": "http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "title", "value": "How We Got to APL\\1130"}, {"name": "last", "value": "Breed"}, {"name": "first", "value": "Larry"}, {"name": "author-link", "value": "Larry Breed"}, {"name": "journal", "value": "Vector (British APL Association)"}, {"name": "volume", "value": "22"}, {"name": "issue", "value": "3"}, {"name": "date", "value": "August 2006"}, {"name": "issn", "value": "0955-1433"}, {"name": "access-date", "value": "2007-04-02"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "archive-date", "value": "2008-05-12"}, {"name": "url-status", "value": "dead"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20110221034650/http://www.bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf"}, {"name": "date", "value": "2011-02-21"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.quadibloc.com/comp/aplint.htm"}, {"name": "title", "value": "Remembering APL"}, {"name": "publisher", "value": "Quadibloc.com"}, {"name": "access-date", "value": "June 17, 2013"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20120229200744/http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf"}, {"name": "date", "value": "2012-02-29"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20100711092528/http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf"}, {"name": "date", "value": "2010-07-11"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Pakin"}, {"name": "first", "value": "Sandra"}, {"name": "title", "value": "APL\\360 Reference Manual"}, {"name": "publisher", "value": "Science Research Associates, Inc."}, {"name": "year", "value": "1968"}, {"name": "isbn", "value": "978-0-574-16135-2"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Minker"}, {"name": "first", "value": "Jack"}, {"name": "title", "value": "Beginning of Computing and Computer Sciences at the University of Maryland"}, {"name": "url", "value": "http://www.cs.umd.edu/department/dept-history/minker-report.pdf"}, {"name": "publisher", "value": "University of Maryland"}, {"name": "access-date", "value": "May 23, 2011"}, {"name": "location", "value": "Section 2.3.4"}, {"name": "page", "value": "38"}, {"name": "date", "value": "January 2004"}, {"name": "archive-url", "value": "https://web.archive.org/web/20110610064807/http://www.cs.umd.edu/department/dept-history/minker-report.pdf"}, {"name": "archive-date", "value": "June 10, 2011"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Stebbens"}, {"name": "first", "value": "Alan"}, {"name": "title", "value": "How it all began"}, {"name": "url", "value": "http://lathwellproductions.ca/wordpress/film"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Xerox APL Language and Operations Reference Manual"}, {"name": "url", "value": "http://www.softwarepreservation.org/projects/apl/Books/197506_Xerox%20APL%20Language%20and%20Operations%20Reference%20Manual_90131C.pdf"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.sigapl.org/"}, {"name": "title", "value": "SIGAPL"}, {"name": "publisher", "value": "Sigapl.org"}, {"name": "access-date", "value": "June 17, 2013"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://time.com/69316/basic/"}, {"name": "title", "value": "Fifty Years of BASIC, the Programming Language That Made Computers Personal"}, {"name": "date", "value": "April 29, 2014"}, {"name": "website", "value": "time.com"}, {"name": "publisher", "value": "TIME"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.old-computers.com/museum/computer.asp?c=346"}, {"name": "title", "value": "MCM Computers M70/M700"}, {"name": "website", "value": "old-computers.com"}, {"name": "access-date", "value": "April 8, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20180403063223/http://www.old-computers.com/museum/computer.asp?c=346"}, {"name": "archive-date", "value": "April 3, 2018"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite book", "values": [{"name": "last", "value": "Stachniak"}, {"name": "first", "value": "Stachniak"}, {"name": "date", "value": "2011"}, {"name": "title", "value": "Inventing the PC: The MCM/70 Story"}, {"name": "publisher", "value": "McGill Queens's University Press"}, {"name": "isbn", "value": "978-0-7735-3852-8"}, {"name": "url", "value": "https://books.google.co.uk/books?id=cyWOA2FED7EC"}]}, {"name": "cite magazine ", "values": [{"name": "last", "value": "Miller"}, {"name": "first", "value": "Michael"}, {"name": "date", "value": "December 17, 2014"}, {"name": "title", "value": "PCs That Paved the Way for the Altair"}, {"name": "url", "value": "http://uk.pcmag.com/opinion/38348/opinion/pcs-that-paved-the-way-for-the-altair"}, {"name": "magazine", "value": "PCMagazine"}, {"name": "publisher", "value": "Ziff Davis"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite magazine ", "values": [{"name": "date", "value": "December 1981"}, {"name": "title", "value": "A Look at SuperPet"}, {"name": "url", "value": "https://archive.org/stream/1981-12-compute-magazine/Compute_Issue_019_1981_Dec#page/n131/mode/2up"}, {"name": "magazine", "value": "COMPUTE! The Journal for Progressive Computing"}, {"name": "publisher", "value": "Small System Services Inc"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite magazine ", "values": [{"name": "last", "value": "Gates"}, {"name": "first", "value": "Bill"}, {"name": "date", "value": "January 31, 1976"}, {"name": "title", "value": "An Open Letter to Hobbyists"}, {"name": "url", "value": "http://www.digibarn.com/collections/newsletters/homebrew/V2_01/index.html"}, {"name": "magazine", "value": "Homebrew Computer Club Newsletter"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "Hui"}, {"name": "first1", "value": "Roger"}, {"name": "title", "value": "Remembering Ken Iverson"}, {"name": "url", "value": "http://keiapl.org/rhui/remember.htm"}, {"name": "website", "value": "keiapl.org"}, {"name": "publisher", "value": "KEIAPL"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "ACM A.M. Turing Award"}, {"name": "title", "value": "Kenneth E. Iverson \u2013 Citation"}, {"name": "url", "value": "http://amturing.acm.org/award_winners/iverson_9147499.cfm"}, {"name": "website", "value": "amturing.acm.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "ACM SIGPLAN"}, {"name": "title", "value": "APL2: The Early Years"}, {"name": "url", "value": "http://www.sigapl.org/Articles/JimBrown-TechCompromise.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Micro APL"}, {"name": "title", "value": "Overview of the APL System"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter1.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "Micro APL"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Robertson"}, {"name": "first1", "value": "Graeme"}, {"name": "title", "value": "A Personal View of APL2010"}, {"name": "url", "value": "http://archive.vector.org.uk/art10500450"}, {"name": "website", "value": "archive.vector.org.uk"}, {"name": "publisher", "value": "Vector \u2013 Journal of the British APL Association"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Rodriguez"}, {"name": "first1", "value": "P."}, {"name": "last2", "value": "Rojas"}, {"name": "first2", "value": "J."}, {"name": "last3", "value": "Alfonseca"}, {"name": "first3", "value": "M."}, {"name": "last4", "value": "Burgos"}, {"name": "first4", "value": "J. I."}, {"name": "title", "value": "An Expert System in Chemical Synthesis written in APL2/PC"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "1989"}, {"name": "volume", "value": "19"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "299\u2013303"}, {"name": "doi", "value": "10.1145/75144.75185"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "IBM"}, {"name": "title", "value": "APL2: A Programming Language for Problem Solving, Visualization and Database Access"}, {"name": "url", "value": "http://www-03.ibm.com/software/products/en/apl2"}, {"name": "website", "value": "www-03.ibm.com"}, {"name": "publisher", "value": "IBM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite journal ", "values": [{"name": "url", "value": "https://pdfs.semanticscholar.org/f7c4/72cdf7f4cb57d34c08d09f6c9a5340372678.pdf"}, {"name": "title", "value": "The IBM family of APL systems"}, {"name": "first", "value": "Adin D."}, {"name": "last", "value": "Falkoff"}, {"name": "year", "value": "1991"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "416\u2013432"}, {"name": "access-date", "value": "April 15, 2018"}, {"name": "doi", "value": "10.1147/sj.304.0416"}]}, {"name": "Citation needed", "values": [{"name": "date", "value": "April 2010"}]}, {"name": "Cite web", "values": [{"name": "url", "value": "https://godoc.org/robpike.io/ivy"}, {"name": "title", "value": "Ivy"}, {"name": "last", "value": "Pike"}, {"name": "first", "value": "Rob"}, {"name": "date", "value": "2018-03-25"}, {"name": "website", "value": "GoDoc"}, {"name": "archive-url", "value": "https://web.archive.org/web/20190813210651/https://godoc.org/robpike.io/ivy"}, {"name": "archive-date", "value": "2019-08-13"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.jsoftware.com/jwiki/Essays/Bibliography"}, {"name": "title", "value": "A Bibliography of APL and J"}, {"name": "publisher", "value": "Jsoftware.com"}, {"name": "access-date", "value": "March 2, 2010"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://kx.com/Company/press-releases/arthur-interview.php"}, {"name": "title", "value": "An Interview with Arthur Whitney"}, {"name": "publisher", "value": "Kx Systems"}, {"name": "date", "value": "January 4, 2004"}, {"name": "access-date", "value": "March 2, 2010"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20090404064737/http://kx.com/Company/press-releases/arthur-interview.php"}, {"name": "archive-date", "value": "April 4, 2009"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf"}, {"name": "title", "value": "The Growth of MATLAB"}, {"name": "last", "value": "Moler"}, {"name": "first", "value": "Cleve"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20090411120119/http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf"}, {"name": "archive-date", "value": "April 11, 2009"}]}], "id": 1}, {"title": " Mathematical notation", "paragraphs": "A [[mathematical notation]] for manipulating arrays was developed by [[Kenneth E. Iverson]], starting in 1957 at [[Harvard University]]. In 1960, he began work for [[IBM]] where he developed this notation with [[Adin Falkoff]] and published it in his book ''A Programming Language'' in 1962.<ref name=\"aplbook\" /> The preface states its premise:\n{{quote|Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or ''programs''. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a ''programming language''.\n}}\n\nThis notation was used inside IBM for short research reports on computer systems, such as the [[Burroughs B5000]] and its stack mechanism when [[stack machine]]s versus [[register machine]]s were being evaluated by IBM for upcoming computers.\n\nIverson also used his notation in a draft of the chapter ''A Programming Language'', written for a book he was writing with [[Fred Brooks]], ''Automatic Data Processing'', which would be published in 1963.<ref>Iverson, Kenneth E., [http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view \"Automatic Data Processing: Chapter 6: A programming language\"] {{webarchive|url=https://web.archive.org/web/20090604091847/http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view |date=June 4, 2009}}, 1960, Draft copy for Brooks and Iverson 1963 book, ''Automatic Data Processing''.</ref><ref>[[Fred Brooks|Brooks, Fred]]; Iverson, Kenneth, (1963), ''Automatic Data Processing'', John Wiley & Sons Inc.</ref>\n\nIn 1979, Iverson received the [[Turing Award]] for his work on APL.<ref>{{cite web |url=http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING |title=Turing Award Citation 1979 |publisher=Awards.acm.org |access-date=February 3, 2010 |archive-url=https://web.archive.org/web/20091223064709/http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING |archive-date=2009-12-23 |url-status=dead }}</ref>\n\n", "attributes": [{"name": "quote", "values": [{"name": "1", "value": "Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or ''programs''. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a ''programming language''."}]}, {"name": "webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20090604091847/http://www.softwarepreservation.org/projects/apl/book/Iverson-AutomaticDataProcessing-color.pdf/view"}, {"name": "date", "value": "June 4, 2009"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING"}, {"name": "title", "value": "Turing Award Citation 1979"}, {"name": "publisher", "value": "Awards.acm.org"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "archive-url", "value": "https://web.archive.org/web/20091223064709/http://awards.acm.org/citation.cfm?id=9147499&srt=all&aw=140&ao=AMTURING"}, {"name": "archive-date", "value": "2009-12-23"}, {"name": "url-status", "value": "dead"}]}], "id": 2}, {"title": " Development into a computer programming language ", "paragraphs": "As early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with William C. Carter his work to standardize the instruction set for the machines that later became the [[IBM System/360]] family.\n\nIn 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an [[IBM 1620]] computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a part of the notation was called Personalized Array Translator (PAT).<ref>Hellerman, H., \"Experimental Personalized Array Translator System\", ''Communications of the ACM'', 7, 433 (July, 1964).</ref>\n\nIn 1963, Falkoff, Iverson, and [[Edward H. Sussenguth Jr.]], all working at IBM, used the notation for a formal description of the [[IBM System/360]] series machine architecture and functionality, which resulted in a paper published in ''[[IBM Systems Journal]]'' in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with [[Science Research Associates]], an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help use the language as a tool to develop and use computers in education.<ref>Falkoff, Adin D.; Iverson, Kenneth E., [http://www.jsoftware.com/papers/APLEvol.htm \"The Evolution of APL\"], ACM SIGPLAN Notices 13, 1978-08.</ref>\n\nAfter [[Lawrence M. Breed]] and [[Philip S. Abrams]] of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in [[FORTRAN IV]] for a part of the notation which had been done for the [[IBM 7090]] computer running on the [[IBM 7090/94 IBSYS|IBSYS]] operating system. This work was finished in late 1965 and later named IVSYS (for Iverson system). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, \"An Interpreter for Iverson Notation\" in 1966, the academic aspect of this was formally supervised by [[Niklaus Wirth]].<ref>Abrams, Philip S., [http://infolab.stanford.edu/TR/CS-TR-66-47.html ''An interpreter for \"Iverson notation\"''], Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966;</ref> Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a [[time-sharing]] system and, by November 1966, it had been reprogrammed for the [[IBM System/360 Model 50]] computer running in a time sharing mode and was used internally at IBM.<ref>{{cite journal |last=Haigh |first=Thomas |year=2005 |title=Biographies: Kenneth E. Iverson |journal=IEEE Annals of the History of Computing|doi=10.1109/MAHC.2005.4 }}</ref>\n\n", "attributes": [{"name": "cite journal ", "values": [{"name": "last", "value": "Haigh"}, {"name": "first", "value": "Thomas"}, {"name": "year", "value": "2005"}, {"name": "title", "value": "Biographies: Kenneth E. Iverson"}, {"name": "journal", "value": "IEEE Annals of the History of Computing"}, {"name": "doi", "value": "10.1109/MAHC.2005.4"}]}], "id": 3}, {"title": " Hardware ", "paragraphs": "[[File:IBM Selectric Globe Wiki.jpg|thumb|IBM typeballs (one OCR) with clip, {{\u20ac|2}} coin for scale]]\n\n[[File:APL-keybd2.svg|thumb|A programmer's view of the IBM 2741 keyboard layout with the APL typing element print head inserted]]\n\nA key development in the ability to use APL effectively, before the wide use of cathode ray tube ([[Computer monitor#Cathode ray tube|CRT]]) terminals, was the development of a special [[IBM Selectric typewriter]] interchangeable typing element with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typing element mechanism, such as the [[IBM 1050]] and [[IBM 2741]] terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could type in and see proper APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typing elements, 987 and 988, designed in late 1964, although no APL computer system was available to use them.<ref name=\"APLQQ91\">Breed, Larry, [http://portal.acm.org/citation.cfm?id=138094.140933 \"The First APL Terminal Session\"], ''APL Quote Quad'', Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4.</ref> Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typing element for the APL character set.<ref>[http://www.computerhistory.org/tdih/?setdate=December 19, 2009 Adin Falkoff] \u2013 Computer History Museum. \"Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs.\"</ref>\n\nMany APL symbols, even with the APL characters on the Selectric typing element, still had to be typed in by over-striking two extant element characters. An example is the ''grade up'' character, which had to be made from a ''delta'' (shift-H) and a ''[[Sheffer stroke]]'' (shift-M). This was necessary because the APL character set was much larger than the 88 characters allowed on the typing element, even when letters were restricted to upper-case (capitals).\n\n", "attributes": [{"name": "\u20ac", "values": [{"name": "1", "value": "2"}]}], "id": 4}, {"title": " Commercial availability ", "paragraphs": "The first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near [[Thomas J. Watson Research Center]], the home of APL, in [[Yorktown Heights, New York]].<ref name=\"APLQQ91\"/>\n\nIBM was chiefly responsible for introducing APL to the marketplace. APL was first available in 1967 for the [[IBM 1130]] as ''APL\\1130''.<ref>{{cite journal |url=http://www.vector.org.uk/archive/v223/APL_1130.htm |title=How We Got to APL\\1130 |last=Breed |first=Larry |author-link=Larry Breed |journal=Vector (British APL Association) |volume=22 |issue=3 |date=August 2006 |issn=0955-1433 |access-date=2007-04-02 |archive-url=https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm |archive-date=2008-05-12 |url-status=dead }}</ref><ref>[http://bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf APL\\1130 Manual] {{Webarchive|url=https://web.archive.org/web/20110221034650/http://www.bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf |date=2011-02-21 }}, May 1969</ref> It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk.\n\nAPL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would support multiple users on lower-specification systems that had no [[Memory management unit|dynamic address translation]] hardware.<ref>{{cite web|url=http://www.quadibloc.com/comp/aplint.htm |title=Remembering APL |publisher=Quadibloc.com |date= |access-date=June 17, 2013}}</ref> Additional improvements in performance for selected [[IBM System/370]] mainframe systems included the ''APL Assist Microcode'' in which some support for APL execution was included in the processor's [[firmware]], as distinct from being implemented entirely by higher-level software. Somewhat later, as suitably performing hardware was finally growing available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.\n\nEarly IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were their own timesharing systems. First introduced in 1966, the ''APL\\360''<ref name=\"IBM APL\\360 1968\">Falkoff, Adin; Iverson, Kenneth E., [http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf \"APL\\360 Users Guide\"] {{Webarchive|url=https://web.archive.org/web/20120229200744/http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf |date=2012-02-29 }}, IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968.</ref><ref>[http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf \"APL\\360 Terminal System\"] {{Webarchive|url=https://web.archive.org/web/20100711092528/http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf |date=2010-07-11 }}, IBM Research, Thomas J. Watson Research Center, March 1967.</ref><ref name=\"apl360\">{{cite book |last=Pakin |first=Sandra |title=APL\\360 Reference Manual |publisher=Science Research Associates, Inc. |year=1968 |isbn=978-0-574-16135-2}}</ref> system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged \"I-beam\" functions, using both [[Monad (functional programming)|monadic]] and [[Dyadics|dyadic]] operations.<ref>Falkoff, Adin D.; Iverson, Kenneth E.,[http://www.research.ibm.com/journal/rd/174/ibmrd1704F.pdf ''The Design of APL''], ''IBM Journal of Research and Development'', Volume 17, Number 4, July 1973. \"These environmental defined functions were based on the use of still another class of functions\u2014called \"I-beams\" because of the shape of the symbol used for them\u2014which provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day.\"</ref>\n\nIn 1973, IBM released ''APL.SV'', which was a continuation of the same product, but which offered [[shared variable]]s as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the [[IBM 5100]] desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered [[BASIC]]. In the 1980s, the ''VSAPL'' program product enjoyed wide use with [[Conversational Monitor System]] (CMS), [[Time Sharing Option]] (TSO), [[VSPC]], [[MUSIC/SP]], and [[CICS]] users.\n\nIn 1973-1974, Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the 1100 line of the Sperry [[UNIVAC 1100/2200 series]] mainframe computers.<ref>{{cite web |last=Minker |first=Jack |title=Beginning of Computing and Computer Sciences at the University of Maryland |url=http://www.cs.umd.edu/department/dept-history/minker-report.pdf |publisher=University of Maryland |access-date=May 23, 2011 |location=Section 2.3.4 |page=38 |date=January 2004 |archive-url= https://web.archive.org/web/20110610064807/http://www.cs.umd.edu/department/dept-history/minker-report.pdf |archive-date= June 10, 2011}}</ref> At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.<ref>{{cite web |last=Stebbens |first=Alan |title=How it all began |url=http://lathwellproductions.ca/wordpress/film}}</ref> Xerox APL was available from June 1975 for Xerox 560 and Sigma 6, 7, and 9 mainframes running [[Universal_Time-Sharing_System#CP-V | CP-V]] and for [[Honeywell CP-6]].<ref>{{cite web |title=Xerox APL Language and Operations Reference Manual |url=http://www.softwarepreservation.org/projects/apl/Books/197506_Xerox%20APL%20Language%20and%20Operations%20Reference%20Manual_90131C.pdf}}</ref>\n\nIn the 1960s and 1970s, several timesharing firms arose that sold APL services using modified versions of the IBM APL\\360<ref name=\"apl360\" /> interpreter. In North America, the better-known ones were [[I. P. Sharp Associates]], [[Scientific Time Sharing Corporation]] (STSC), Time Sharing Resources (TSR), and [[The Computer Company]] (TCC). CompuServe also entered the market in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's, which ran on DEC's KI and KL 36-bit machines. CompuServe's APL was available both to its commercial market and the consumer information service.  With the advent first of less expensive mainframes such as the [[IBM 4300]], and later the personal computer, by the mid-1980s, the timesharing industry was all but gone.\n\n''Sharp APL'' was available from [[I. P. Sharp Associates]], first as a timesharing service in the 1960s, and later as a program product starting around 1979. ''Sharp APL'' was an advanced APL implementation with many language extensions, such as ''packages'' (the ability to put one or more objects into a single variable), file system, nested arrays, and [[shared variable]]s.\n\nAPL interpreters were available from other mainframe and mini-computer manufacturers also, notably [[Burroughs Corporation|Burroughs]], [[Control Data Corporation]] (CDC), [[Data General]], [[Digital Equipment Corporation]] (DEC), [[Harris Corporation|Harris]], [[Hewlett-Packard]] (HP), [[Siemens AG]], [[Xerox]], and others.\n\nGarth Foster of [[Syracuse University]] sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in [[Blue Mountain Lake, New York]]. In later years, Eugene McDonnell organized similar meetings at the [[Asilomar Conference Grounds]] near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the [[Association for Computing Machinery]] continues to support the APL community.<ref>{{cite web |url=http://www.sigapl.org/ |title=SIGAPL |publisher=Sigapl.org |date= |access-date=June 17, 2013}}</ref>\n\n", "attributes": [{"name": "cite journal ", "values": [{"name": "url", "value": "http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "title", "value": "How We Got to APL\\1130"}, {"name": "last", "value": "Breed"}, {"name": "first", "value": "Larry"}, {"name": "author-link", "value": "Larry Breed"}, {"name": "journal", "value": "Vector (British APL Association)"}, {"name": "volume", "value": "22"}, {"name": "issue", "value": "3"}, {"name": "date", "value": "August 2006"}, {"name": "issn", "value": "0955-1433"}, {"name": "access-date", "value": "2007-04-02"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "archive-date", "value": "2008-05-12"}, {"name": "url-status", "value": "dead"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20110221034650/http://www.bitsavers.org/pdf/ibm/1130/lang/1130-03.3.001_APL_1130_May69.pdf"}, {"name": "date", "value": "2011-02-21"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.quadibloc.com/comp/aplint.htm"}, {"name": "title", "value": "Remembering APL"}, {"name": "publisher", "value": "Quadibloc.com"}, {"name": "access-date", "value": "June 17, 2013"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20120229200744/http://bitsavers.org/pdf/ibm/apl/APL_360_Users_Manual_Aug68.pdf"}, {"name": "date", "value": "2012-02-29"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20100711092528/http://bitsavers.org/pdf/ibm/apl/APL_360_Terminal_System_Mar67.pdf"}, {"name": "date", "value": "2010-07-11"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Pakin"}, {"name": "first", "value": "Sandra"}, {"name": "title", "value": "APL\\360 Reference Manual"}, {"name": "publisher", "value": "Science Research Associates, Inc."}, {"name": "year", "value": "1968"}, {"name": "isbn", "value": "978-0-574-16135-2"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Minker"}, {"name": "first", "value": "Jack"}, {"name": "title", "value": "Beginning of Computing and Computer Sciences at the University of Maryland"}, {"name": "url", "value": "http://www.cs.umd.edu/department/dept-history/minker-report.pdf"}, {"name": "publisher", "value": "University of Maryland"}, {"name": "access-date", "value": "May 23, 2011"}, {"name": "location", "value": "Section 2.3.4"}, {"name": "page", "value": "38"}, {"name": "date", "value": "January 2004"}, {"name": "archive-url", "value": "https://web.archive.org/web/20110610064807/http://www.cs.umd.edu/department/dept-history/minker-report.pdf"}, {"name": "archive-date", "value": "June 10, 2011"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Stebbens"}, {"name": "first", "value": "Alan"}, {"name": "title", "value": "How it all began"}, {"name": "url", "value": "http://lathwellproductions.ca/wordpress/film"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Xerox APL Language and Operations Reference Manual"}, {"name": "url", "value": "http://www.softwarepreservation.org/projects/apl/Books/197506_Xerox%20APL%20Language%20and%20Operations%20Reference%20Manual_90131C.pdf"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.sigapl.org/"}, {"name": "title", "value": "SIGAPL"}, {"name": "publisher", "value": "Sigapl.org"}, {"name": "access-date", "value": "June 17, 2013"}]}], "id": 5}, {"title": " Microcomputers ", "paragraphs": "On microcomputers, which became available from the mid 1970s onwards, [[BASIC]] became the dominant programming language.<ref>{{cite web|url=http://time.com/69316/basic/|title=Fifty Years of BASIC, the Programming Language That Made Computers Personal|date=April 29, 2014|website=time.com|publisher=TIME|access-date=April 29, 2018}}</ref> Nevertheless, some microcomputers provided APL instead - the first being the [[Intel 8008]]-based [[MCM/70]] which was released in 1974<ref>{{cite web|url=http://www.old-computers.com/museum/computer.asp?c=346|title=MCM Computers M70/M700|website=old-computers.com|access-date=April 8, 2018|archive-url=https://web.archive.org/web/20180403063223/http://www.old-computers.com/museum/computer.asp?c=346|archive-date=April 3, 2018|url-status=dead}}</ref><ref>{{cite book|last=Stachniak|first=Stachniak |date=2011|title=Inventing the PC: The MCM/70 Story|publisher=McGill Queens's University Press |isbn=978-0-7735-3852-8|url=https://books.google.co.uk/books?id=cyWOA2FED7EC}}</ref> and which was primarily used in education.<ref>{{cite magazine |last=Miller |first=Michael |date=December 17, 2014 |title=PCs That Paved the Way for the Altair |url=http://uk.pcmag.com/opinion/38348/opinion/pcs-that-paved-the-way-for-the-altair |magazine=PCMagazine |publisher=Ziff Davis |access-date=April 29, 2018 }}</ref> Another machine of this time was the [[VideoBrain Family Computer]], released in 1977, which was supplied with its dialect of APL called APL/S.<ref>[https://books.google.com/books?id=OQEAAAAAMBAJ&pg=PA133&lpg=PA133&dq=videobrain+family+computer+apl/s#v=onepage&q=videobrain%20family%20computer%20apl%2Fs \"VideoBrain Family Computer\"], ''[[Popular Science]]'', November 1978, advertisement.</ref>\n\nThe [[Commodore SuperPET]], introduced in 1981, included an APL interpreter developed by the [[University of Waterloo]].<ref>{{cite magazine |date=December 1981 |title=A Look at SuperPet |url=https://archive.org/stream/1981-12-compute-magazine/Compute_Issue_019_1981_Dec#page/n131/mode/2up |magazine=COMPUTE! The Journal for Progressive Computing |location= |publisher=Small System Services Inc |access-date=April 29, 2018 }}</ref>\n\nIn 1976, Bill Gates claimed in his [[Open Letter to Hobbyists]] that [[Microsoft Corporation]] was implementing APL for the [[Intel 8080]] and [[Motorola 6800]] but had \"very little incentive to make [it] available to hobbyists\" because of [[software piracy]].<ref>{{cite magazine |last=Gates |first=Bill |date=January 31, 1976 |title=An Open Letter to Hobbyists |url=http://www.digibarn.com/collections/newsletters/homebrew/V2_01/index.html |magazine=Homebrew Computer Club Newsletter |access-date=April 29, 2018}}</ref> It was never released.\n\n", "attributes": [{"name": "cite web", "values": [{"name": "url", "value": "http://time.com/69316/basic/"}, {"name": "title", "value": "Fifty Years of BASIC, the Programming Language That Made Computers Personal"}, {"name": "date", "value": "April 29, 2014"}, {"name": "website", "value": "time.com"}, {"name": "publisher", "value": "TIME"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.old-computers.com/museum/computer.asp?c=346"}, {"name": "title", "value": "MCM Computers M70/M700"}, {"name": "website", "value": "old-computers.com"}, {"name": "access-date", "value": "April 8, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20180403063223/http://www.old-computers.com/museum/computer.asp?c=346"}, {"name": "archive-date", "value": "April 3, 2018"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite book", "values": [{"name": "last", "value": "Stachniak"}, {"name": "first", "value": "Stachniak"}, {"name": "date", "value": "2011"}, {"name": "title", "value": "Inventing the PC: The MCM/70 Story"}, {"name": "publisher", "value": "McGill Queens's University Press"}, {"name": "isbn", "value": "978-0-7735-3852-8"}, {"name": "url", "value": "https://books.google.co.uk/books?id=cyWOA2FED7EC"}]}, {"name": "cite magazine ", "values": [{"name": "last", "value": "Miller"}, {"name": "first", "value": "Michael"}, {"name": "date", "value": "December 17, 2014"}, {"name": "title", "value": "PCs That Paved the Way for the Altair"}, {"name": "url", "value": "http://uk.pcmag.com/opinion/38348/opinion/pcs-that-paved-the-way-for-the-altair"}, {"name": "magazine", "value": "PCMagazine"}, {"name": "publisher", "value": "Ziff Davis"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite magazine ", "values": [{"name": "date", "value": "December 1981"}, {"name": "title", "value": "A Look at SuperPet"}, {"name": "url", "value": "https://archive.org/stream/1981-12-compute-magazine/Compute_Issue_019_1981_Dec#page/n131/mode/2up"}, {"name": "magazine", "value": "COMPUTE! The Journal for Progressive Computing"}, {"name": "publisher", "value": "Small System Services Inc"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite magazine ", "values": [{"name": "last", "value": "Gates"}, {"name": "first", "value": "Bill"}, {"name": "date", "value": "January 31, 1976"}, {"name": "title", "value": "An Open Letter to Hobbyists"}, {"name": "url", "value": "http://www.digibarn.com/collections/newsletters/homebrew/V2_01/index.html"}, {"name": "magazine", "value": "Homebrew Computer Club Newsletter"}, {"name": "access-date", "value": "April 29, 2018"}]}], "id": 6}, {"title": " APL2 ", "paragraphs": "Starting in the early 1980s, IBM APL development, under the leadership of [[Jim Brown (computer scientist)|Jim Brown]], implemented a new version of the APL language that contained as its primary enhancement the concept of ''nested arrays'', where an array can contain other arrays, and new language features which facilitated integrating nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined [[I. P. Sharp Associates]], where one of his major contributions was directing the evolution of Sharp APL to be more in accord with his vision.<ref>{{cite web |last1=Hui |first1=Roger |title=Remembering Ken Iverson |url=http://keiapl.org/rhui/remember.htm|website=keiapl.org|publisher=KEIAPL |access-date=January 10, 2015}}</ref><ref>{{cite web |last1=ACM A.M. Turing Award |title=Kenneth E. Iverson \u2013 Citation |url=http://amturing.acm.org/award_winners/iverson_9147499.cfm |website=amturing.acm.org|publisher=ACM |access-date=January 10, 2015}}</ref><ref>{{cite web |last1=ACM SIGPLAN |title=APL2: The Early Years |url=http://www.sigapl.org/Articles/JimBrown-TechCompromise.php |website=www.sigapl.org|publisher=ACM |access-date=January 10, 2015}}</ref>\n\nAs other vendors were busy developing APL interpreters for new hardware, notably [[Unix]]-based [[microcomputer]]s, APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.<ref>{{cite web|last1=Micro APL|title=Overview of the APL System|url=http://www.microapl.co.uk/apl/apl_concepts_chapter1.html|website=www.microapl.co.uk|publisher=Micro APL|access-date=January 10, 2015}}</ref><ref>{{cite web|last1=Robertson|first1=Graeme|title=A Personal View of APL2010|url=http://archive.vector.org.uk/art10500450|website=archive.vector.org.uk|publisher=Vector \u2013 Journal of the British APL Association|access-date=January 10, 2015}}</ref>\n\n''APL2'' for IBM mainframe computers is still available.  IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,<ref>{{cite journal|last1=Rodriguez|first1=P.|last2=Rojas|first2=J.|last3=Alfonseca|first3=M.|last4=Burgos|first4=J. I.|title=An Expert System in Chemical Synthesis written in APL2/PC|journal=ACM SIGAPL APL Quote Quad|date=1989|volume=19|issue=4|pages=299\u2013303|doi=10.1145/75144.75185}}</ref> for teaching mathematics and other subjects, visualization and database access<ref>{{cite web|last1=IBM|title=APL2: A Programming Language for Problem Solving, Visualization and Database Access|url=http://www-03.ibm.com/software/products/en/apl2|website=www-03.ibm.com|publisher=IBM|access-date=January 10, 2015}}</ref> and was first available for [[Conversational Monitor System|CMS]] and [[Time Sharing Option|TSO]] in 1984.<ref name=\"FalkoffIBMFamily\">{{cite journal |url=https://pdfs.semanticscholar.org/f7c4/72cdf7f4cb57d34c08d09f6c9a5340372678.pdf|title=The IBM family of APL systems |first=Adin D. |last=Falkoff |year=1991 |journal=IBM Systems Journal |volume=30 |issue=4 |pages=416\u2013432 |access-date=April 15, 2018 |doi=10.1147/sj.304.0416}}</ref> The APL2 Workstation edition (Windows, [[OS/2]], [[IBM AIX|AIX]], [[Linux]], and [[Solaris (operating system)|Solaris]]) followed much later in the early 1990s.{{Citation needed|date=April 2010}}\n\n", "attributes": [{"name": "cite web ", "values": [{"name": "last1", "value": "Hui"}, {"name": "first1", "value": "Roger"}, {"name": "title", "value": "Remembering Ken Iverson"}, {"name": "url", "value": "http://keiapl.org/rhui/remember.htm"}, {"name": "website", "value": "keiapl.org"}, {"name": "publisher", "value": "KEIAPL"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "ACM A.M. Turing Award"}, {"name": "title", "value": "Kenneth E. Iverson \u2013 Citation"}, {"name": "url", "value": "http://amturing.acm.org/award_winners/iverson_9147499.cfm"}, {"name": "website", "value": "amturing.acm.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "ACM SIGPLAN"}, {"name": "title", "value": "APL2: The Early Years"}, {"name": "url", "value": "http://www.sigapl.org/Articles/JimBrown-TechCompromise.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Micro APL"}, {"name": "title", "value": "Overview of the APL System"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter1.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "Micro APL"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Robertson"}, {"name": "first1", "value": "Graeme"}, {"name": "title", "value": "A Personal View of APL2010"}, {"name": "url", "value": "http://archive.vector.org.uk/art10500450"}, {"name": "website", "value": "archive.vector.org.uk"}, {"name": "publisher", "value": "Vector \u2013 Journal of the British APL Association"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Rodriguez"}, {"name": "first1", "value": "P."}, {"name": "last2", "value": "Rojas"}, {"name": "first2", "value": "J."}, {"name": "last3", "value": "Alfonseca"}, {"name": "first3", "value": "M."}, {"name": "last4", "value": "Burgos"}, {"name": "first4", "value": "J. I."}, {"name": "title", "value": "An Expert System in Chemical Synthesis written in APL2/PC"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "1989"}, {"name": "volume", "value": "19"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "299\u2013303"}, {"name": "doi", "value": "10.1145/75144.75185"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "IBM"}, {"name": "title", "value": "APL2: A Programming Language for Problem Solving, Visualization and Database Access"}, {"name": "url", "value": "http://www-03.ibm.com/software/products/en/apl2"}, {"name": "website", "value": "www-03.ibm.com"}, {"name": "publisher", "value": "IBM"}, {"name": "access-date", "value": "January 10, 2015"}]}, {"name": "cite journal ", "values": [{"name": "url", "value": "https://pdfs.semanticscholar.org/f7c4/72cdf7f4cb57d34c08d09f6c9a5340372678.pdf"}, {"name": "title", "value": "The IBM family of APL systems"}, {"name": "first", "value": "Adin D."}, {"name": "last", "value": "Falkoff"}, {"name": "year", "value": "1991"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "416\u2013432"}, {"name": "access-date", "value": "April 15, 2018"}, {"name": "doi", "value": "10.1147/sj.304.0416"}]}, {"name": "Citation needed", "values": [{"name": "date", "value": "April 2010"}]}], "id": 7}, {"title": " Modern implementations ", "paragraphs": "Various implementations of APL by APLX, Dyalog, et al., include extensions for [[object-oriented programming]], support for [[.NET Framework]], XML-array conversion primitives, graphing, operating system interfaces, and [[lambda calculus]] expressions.\n\n", "attributes": [], "id": 8}, {"title": " Derivative languages ", "paragraphs": "APL has formed the basis of, or influenced, the following languages:\n\n* [[A+ (programming language)|A and A+]], an alternative APL, the latter with graphical extensions.\n* [[FP (programming language)|FP]], a functional programming language.\n*Ivy, an interpreter for an APL-like language developed by [[Rob Pike]], and which uses [[ASCII]] as input.<ref>{{Cite web|url=https://godoc.org/robpike.io/ivy|title=Ivy|last=Pike|first=Rob|date=2018-03-25|website=GoDoc|archive-url=https://web.archive.org/web/20190813210651/https://godoc.org/robpike.io/ivy|archive-date=2019-08-13|url-status=}}</ref>\n* [[J (programming language)|J]], which was also designed by Iverson, and which uses [[ASCII]] with [[Digraph (computing)|digraphs]] instead of special symbols.<ref name=\"jinsp\">{{cite web |url=http://www.jsoftware.com/jwiki/Essays/Bibliography |title=A Bibliography of APL and J |publisher=Jsoftware.com |date= |access-date=March 2, 2010}}</ref>\n* [[K (programming language)|K]], a proprietary variant of APL developed by Arthur Whitney.<ref name=\"kinsp\">{{cite web |url=http://kx.com/Company/press-releases/arthur-interview.php |title=An Interview with Arthur Whitney |publisher=Kx Systems |date=January 4, 2004 |access-date=March 2, 2010 |url-status=dead |archive-url=https://web.archive.org/web/20090404064737/http://kx.com/Company/press-releases/arthur-interview.php |archive-date=April 4, 2009}}</ref>\n* [[LYaPAS]], a [[Soviet Union|Russian]] extension to APL.\n* [[MATLAB]], a numerical computation tool.<ref name=\"mworks\">{{cite web |url=http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf |title=The Growth of MATLAB |last=Moler |first=Cleve |access-date=February 3, 2010 |url-status=dead |archive-url=https://web.archive.org/web/20090411120119/http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf |archive-date=April 11, 2009 }}</ref>\n* [[Nial]], a high-level array programming language with a functional programming notation.\n* [[Polymorphic Programming Language]], an interactive, extensible language with a similar base language.\n* [[S (programming language)|S]], a statistical programming language.\n* [[Speakeasy (computational environment)|Speakeasy]], a numerical computing interactive environment.\n* [[Wolfram Language]], the programming language of [[Mathematica]].\n\n", "attributes": [{"name": "Cite web", "values": [{"name": "url", "value": "https://godoc.org/robpike.io/ivy"}, {"name": "title", "value": "Ivy"}, {"name": "last", "value": "Pike"}, {"name": "first", "value": "Rob"}, {"name": "date", "value": "2018-03-25"}, {"name": "website", "value": "GoDoc"}, {"name": "archive-url", "value": "https://web.archive.org/web/20190813210651/https://godoc.org/robpike.io/ivy"}, {"name": "archive-date", "value": "2019-08-13"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.jsoftware.com/jwiki/Essays/Bibliography"}, {"name": "title", "value": "A Bibliography of APL and J"}, {"name": "publisher", "value": "Jsoftware.com"}, {"name": "access-date", "value": "March 2, 2010"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://kx.com/Company/press-releases/arthur-interview.php"}, {"name": "title", "value": "An Interview with Arthur Whitney"}, {"name": "publisher", "value": "Kx Systems"}, {"name": "date", "value": "January 4, 2004"}, {"name": "access-date", "value": "March 2, 2010"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20090404064737/http://kx.com/Company/press-releases/arthur-interview.php"}, {"name": "archive-date", "value": "April 4, 2009"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf"}, {"name": "title", "value": "The Growth of MATLAB"}, {"name": "last", "value": "Moler"}, {"name": "first", "value": "Cleve"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20090411120119/http://www.mathworks.com/company/newsletters/news_notes/clevescorner/jan06.pdf"}, {"name": "archive-date", "value": "April 11, 2009"}]}], "id": 9}, {"title": " Language characteristics ", "paragraphs": "=== Character set ===\n{{Main|APL (codepage)|APL syntax and symbols#Monadic functions|l2=syntax and symbols.}}\n\nAPL has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference. In the 1960s and 1970s, few terminal devices and even display monitors could reproduce the APL character set. The most popular ones employed the [[IBM Selectric]] print mechanism used with a special APL type element. One of the early APL [[Computer terminal|line terminals]] (line-mode operation only, ''not'' full screen) was the Texas Instruments TI Model 745 (circa 1977) with the full APL character set<ref>{{cite journal |last1=Texas Instruments |title=TI 745 full page ad: Introducing a New Set of Characters |journal=Computerworld|date=1977 |volume=11 |issue=27 |page=32 |url=https://books.google.com/?id=wMe6erbb5V4C&pg=PA32&lpg=PA32&dq=apl+terminal+%22texas+instruments%22&q=apl%20terminal%20%22texas%20instruments%22 |access-date=January 20, 2015}}</ref> which featured [[Duplex (telecommunications)|half and full duplex]] [[telecommunication]]s modes, for interacting with an APL [[time-sharing]] service or remote mainframe to run a remote computer job, [[Remote job entry|called an RJE]].\n\nOver time, with the universal use of high-quality graphic displays, printing devices and [[Unicode]] support, the APL character font problem has largely been eliminated. However, entering APL characters requires the use of [[input method editor]]s, keyboard mappings, virtual/on-screen APL symbol sets,<ref>{{cite web|last1=Dyalog|title=APL Fonts and Keyboards|url=http://www.dyalog.com/apl-font-keyboard.htm|website=www.dyalog.com|publisher=Dyalog|access-date=January 19, 2015}}</ref><ref>{{cite web|last1=Smith|first1=Bob|title=NARS2000 Keyboard|url=http://www.sudleyplace.com/APL/Keyboard.ahtml|website=www.sudleyplace.com|publisher=Bob Smith / NARS2000|access-date=January 19, 2015}}</ref> or easy-reference printed keyboard cards which can frustrate beginners accustomed to other programming languages.<ref>{{cite web|last1=MicroAPL Ltd|title=Introduction to APL \u2013 APL Symbols|url=http://www.microapl.co.uk/apl/introduction_chapter1.html|website=www.microapl.co.uk|publisher=MicroAPL Ltd|access-date=January 8, 2015}}</ref><ref>{{cite journal|last1=Brown|first1=James A.|last2=Hawks|first2=Brent|last3=Trimble|first3=Ray|title=Extending the APL character set|journal=ACM SIGAPL APL Quote Quad|date=1993|volume=24|issue=1|pages=41\u201346|doi=10.1145/166198.166203}}</ref><ref>{{cite web|last1=Kromberg|first1=Morten|title=Unicode Support for APL|url=http://archive.vector.org.uk/art10500090|website=archive.vector.org.uk|publisher=Vector, Journal of the British APL Association|access-date=January 8, 2015}}</ref> With beginners who have no prior experience with other programming languages, a study involving high school students found that typing and using APL characters did not hinder the students in any measurable way.<ref>{{cite web|last1=Hsu|first1=Aaron|title=Computer Science Outreach and Education with APL|url=http://video.dyalog.com/Dyalog13/?v=kIItfQJEVdM|publisher=Dyalog, Ltd.|access-date=July 15, 2016}}</ref>\n\nIn defense of APL use, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating systems such as Microsoft Windows.<ref>Dyalog, Inc. APL fonts and keyboards. http://www.dyalog.com/apl-font-keyboard.htm</ref> The reported productivity gains assume that one will spend enough time working in APL to make it worthwhile to memorize the symbols, their semantics, and keyboard mappings, not to mention a substantial number of idioms for common tasks.{{citation needed|date=July 2015}}\n\n=== Design ===\nUnlike traditionally structured programming languages, APL code is typically structured as chains of [[unary operation|monadic]] or [[binary operation|dyadic]] [[function (programming)|functions]], and [[higher-order function|operators]]<ref name=\"MicroAOL_Operators\">{{cite web|last1=MicroAPL|title=Operators|url=http://www.microapl.co.uk/apl/apl_concepts_chapter5.html|website=www.microapl.co.uk|publisher=MicroAPL|access-date=January 12, 2015}}</ref> acting on [[array data type|arrays]].<ref>{{cite web|last1=Primitive Functions|title=Primitive Functions|url=http://www.microapl.co.uk/apl_help/ch_020_010_140.htm|website=www.microapl.co.uk/|access-date=January 1, 2015}}</ref> APL has many nonstandard ''primitives'' (functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same [[operator precedence|precedence]], and always associate to the right. Thus, APL is ''read'' or best understood from [[APL syntax and symbols#Syntax rules|right-to-left]].\n\nEarly APL implementations (circa 1970 or so) had no programming loop-[[control flow|flow control]] structures, such as <code>do</code> or <code>while</code> loops, and <code>if-then-else</code> constructs. Instead, they used array operations, and use of [[structured programming]] constructs was often not necessary, since an operation could be performed on a full array in one statement. For example, the <code>iota</code> function (<code>\u03b9</code>) can replace for-loop [[iteration]]: \u03b9N when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated.\n\nThe APL environment is called a ''workspace''. In a workspace the user can define programs and data, i.e., the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.<ref>{{cite web|last1=Workspace|title=The Workspace|url=http://www.microapl.co.uk/apl/apl_concepts_chapter2.html|website=www.microapl.co.uk|access-date=January 1, 2015}}</ref> In the examples below, the APL interpreter first types six spaces before awaiting the user's input. Its own output starts in column one.\n{| class=\"wikitable\"\n|-\n| width=\"200pt\" | <source lang=\"apl\">      n \u2190 4 5 6 7</source>\n| Assigns [[coordinate vector|vector]] of values, {4 5 6 7}, to variable <tt>n</tt>, an array create operation. An equivalent yet more concise APL expression would be <source lang=\"apl\" inline>n \u2190 3 + \u23734</source>. Multiple values are stored in array <code>n</code>, the operation performed ''without formal loops or control flow language''.\n|-\n| <source lang=\"apl\">      n \n4 5 6 7</source>\n| Display the contents of <tt>n</tt>, currently an array or vector.\n|-\n| <source lang=\"apl\">      n+4\n8 9 10 11</source>\n| 4 is now added to all elements of vector <tt>n</tt>, creating a 4-element vector {8 9 10 11}.<br /> As above, APL's interpreter displays the result because the expression's value was not assigned to a variable (with a <tt>\u2190</tt>).\n|-\n| <source lang=\"apl\">      +/n\n22</source>\n| APL displays the sum of components of the vector <tt>n</tt>, i.e., <tt>22 (= 4 + 5 + 6 + 7)</tt> using a very compact notation: read +/ as \"plus, over...\" and a slight change would be \"multiply, over...\"\n|-\n| <source lang=\"apl\">      m \u2190 +/(3+\u23734)\n      m\n22</source>\n| These operations can be combined into one statement, remembering that APL evaluates expressions right to left: first <source lang=\"apl\" inline>\u23734</source> creates an array, <source lang=\"apl\" inline>[1,2,3,4]</source>, then 3 is added to each component, which are summed together and the result stored in variable <tt>m</tt>, finally displayed.\nIn normal mathematical notation, it is equivalent to: <math>\\displaystyle m= \\sum\\limits_{i=1}^4 (i+3)</math>. Recall that mathematical expressions are not read or evaluated from right-to-left.\n|}\n\nThe user can save the workspace with all values, programs, and execution status.\n\nAPL uses a set of non-[[ASCII]] symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for single instruction, multiple data ([[SIMD]]) vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing [[Conway's Game of Life]] in one line of code.<ref>{{cite web|url=http://catpad.net/michael/apl |title=example |publisher=Catpad.net |access-date=June 17, 2013 |url-status=dead |archive-url=https://web.archive.org/web/20130708114840/http://catpad.net/michael/apl/ |archive-date=July 8, 2013 }}</ref> In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code.\n\nBecause of the unusual [[character set]], many programmers use special [[computer keyboard|keyboards]] with APL keytops to write APL code.<ref>{{cite web|last1=APL Symbols|title=Entering APL Symbols|url=http://www.microapl.co.uk/apl/introduction_chapter2.html|website=www.microapl.co.uk|access-date=January 1, 2015}}</ref> Although there are various ways to write APL code using only ASCII characters,<ref>[http://www.math.uwaterloo.ca/apl_archives/apl/translit.schemes Dickey, Lee, A list of APL Transliteration Schemes], 1993</ref> in practice it is almost never done. (This may be thought to support Iverson's thesis about [[Linguistic relativity|notation as a tool of thought]].<ref>Iverson K.E.,\n\"[http://www.jsoftware.com/papers/tot.htm Notation as a Tool of Thought] {{Webarchive|url=https://web.archive.org/web/20130920071911/http://www.jsoftware.com/papers/tot.htm |date=2013-09-20 }}\", ''Communications of the ACM'', 23: 444-465 (August 1980).</ref>) Most if not all modern implementations use standard keyboard layouts, with special mappings or [[input method editor]]s to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font.\n\nAdvocates of APL{{Who|date=March 2015}} claim that the examples of so-called ''write-only code'' (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology.{{cn|date=December 2019}}\n\nThey also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be reduced greatly. Many APL advocates and practitioners also view standard programming languages such as [[COBOL]] and [[Java (programming language)|Java]] as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.<ref>{{cite web |last1=Batenburg |title=APL Efficiency |url=http://www.ekevanbatenburg.nl/PRVAPL.HTML |website=www.ekevanbatenburg.nl |access-date=January 1, 2015}}</ref><ref>{{cite web |last=Vaxman |title=APL Great Programming |url=http://www.vaxman.de/publications/apl_slides.pdf |website=www.vaxman.de |access-date=January 1, 2015}}</ref><ref>{{cite journal |last=Janko |first=Wolfgang |title=Investigation into the efficiency of using APL for the programming of an inference machine |journal= ACM SIGAPL APL Quote Quad|date=May 1987 |volume=17 |issue=4 |pages=450\u2013456 |doi=10.1145/384282.28372}}</ref><ref>{{cite web |last=Borealis |title=Why APL? |url=http://www.aplborealis.com/whyapl.html |website=www.aplborealis.com |access-date=January 1, 2015}}</ref>\n\n=== Terminology ===\nAPL makes a clear distinction between ''functions'' and ''operators''.<ref name=\"MicroAOL_Operators\" /><ref>{{cite web |last=Iverson |first=Kenneth E. |author-link=Kenneth E. Iverson |title=A Dictionary of APL |url=http://www.jsoftware.com/papers/APLDictionary.htm|website=www.jsoftware.com |publisher=JSoftware; Iverson Estate |access-date=January 20, 2015}}</ref> Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to [[higher-order function]]s) take functions or arrays as arguments, and derive related functions. For example, the ''sum'' function is derived by applying the ''reduction'' operator to the ''addition'' function. Applying the same reduction operator to the ''maximum'' function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms ''verb'' for ''function'' and ''adverb'' or ''conjunction'' for ''operator''.\n\nAPL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as ''primitives''. Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment.\n\nSome words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science.\n\n{| class=\"wikitable\"\n|-\n! Term\n! Description\n|-\n! function\n| operation or mapping that takes zero, one (right) or two (left & right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be:\n* Primitive: built-in and represented by a single glyph;<ref name=\"aplxch6\">{{cite web |url=http://www.microapl.co.uk/APL/apl_concepts_chapter6.html |title=APL concepts |publisher=Microapl.co.uk |access-date=February 3, 2010}}</ref>\n* Defined: as a named and ordered collection of program statements;<ref name=\"aplxch6\" />\n* Derived: as a combination of an operator with its arguments.<ref name=\"aplxch6\" />\n|-\n! array\n| data valued object of zero or more [[orthogonal]] dimensions in [[Row- and column-major order|row-major]] order in which each item is a primitive scalar datum or another array.<ref>{{cite web |url=http://www.nial.com/ArrayTheory.html |title=Nested array theory |publisher=Nial.com |access-date=February 3, 2010 |archive-url=https://web.archive.org/web/20110709072354/http://www.nial.com/ArrayTheory.html |archive-date=2011-07-09 |url-status=dead }}</ref>\n|-\n! niladic\n| not taking or requiring any arguments,<ref name=\"Bohman_Froberg\">\"Programmera i APL\", Bohman, Fr\u00f6berg, [[Studentlitteratur]], {{ISBN|91-44-13162-3}}</ref>\n|-\n! monadic\n| requiring only one argument; on the right for a function, on the left for an operator, unary<ref name=\"Bohman_Froberg\" />\n|-\n! dyadic\n| requiring both a left and a right argument, binary<ref name=\"Bohman_Froberg\" />\n|-\n! ambivalent or monadic\n| capable of use in a monadic or dyadic context, permitting its left argument to be elided<ref name=\"aplxch6\" />\n|-\n! operator\n| operation or mapping that takes one (left) or two (left & right) function or array valued arguments (operands) and derives a function. An operator may be:\n* Primitive: built-in and represented by a single glyph;<ref name=\"aplxch6\" />\n* Defined: as a named and ordered collection of program statements.<ref name=\"aplxch6\" />\n|}\n\n=== Syntax ===\n{{Main|APL syntax and symbols}}\nAPL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, and tools to experiment on them.<ref>{{cite web |last=Iverson |first=Kenneth E. |author-link=Kenneth E. Iverson |title=APL Syntax and Semantics |url=http://www.jsoftware.com/papers/APLSyntaxSemantics.htm|website=www.jsoftware.com |publisher=I. P. Sharp Associates |access-date=January 11, 2015}}</ref>\n\n=== Examples ===\n==== Hello, World ====\nThis displays \"[[Hello, world]]\":\n\n<source lang=\"apl\">\n'Hello, world'\n</source>\n'Hello World,' sample user session on YouTube<ref>{{cite web|last1=Dyalog APL/W|title=Producing a standalone 'Hello World' program in APL|url=https://www.youtube.com/watch?v=X8HGPJhHSRY|website=www.youtube.com|publisher=Dyalog-APLtrainer|access-date=January 11, 2015}}</ref>\n\nA design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.\n\nThe 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).\n\n==== Exponentiation ====\nAnother example of this theme is that exponentiation in APL is written as \"{{code|2\u22c63}}\", which indicates raising 2 to the power 3 (this would be written as \"{{code|2^3}}\" in some other languages and \"{{code|2**3}}\" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses {{code|2\u00d73}} for that. However, if no base is specified (as with the statement \"{{code|\u22c63}}\" in APL, or \"{{code|^3}}\" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant [[e (mathematical constant)|e]] (2.71828....), and so interpreting \"{{code|\u22c63}}\" as \"{{code|2.71828\u22c63}}\".\n\n====Simple statistics====\nSuppose that {{code|X}} is an array of numbers. Then {{code|(+/X)\u00f7\u2374X}} gives its average. Reading ''right-to-left'', {{code|\u2374X}} gives the number of elements in X, and since {{code|\u00f7}} is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of {{code|X\u00f7\u2374X}}, of each element of X divided by the number of elements in X), and {{code|+/X}} adds all the elements of X. Building on this, {{code|2=apl|((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}} calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so \n{{sxhl|2=apl|SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}}\nwould place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time.\n\n==== ''Pick 6'' lottery numbers ====\nThis following immediate-mode expression generates a typical set of ''Pick 6'' [[lottery]] numbers: six [[pseudo-random]] [[integer]]s ranging from 1 to 40, ''guaranteed non-repeating'', and displays them sorted in ascending order:\n\n<source lang=\"apl\">\nx[\u234bx\u21906?40]\n</source>\n\nThe above does a lot, concisely; although it seems complex to a new [[wiktionary:APLer|APLer]]. It combines the following APL ''functions'' (also called ''primitives''<ref>{{cite web|last1=MicroAPL|title=APL Primitives|url=http://www.microapl.co.uk/apl_help/ch_020_020.htm|website=www.microapl.co.uk|publisher=MicroAPL|access-date=January 11, 2015}}</ref> and ''glyphs''<ref>{{cite web|last1=NARS2000|title=APL Font \u2013 Extra APL Glyphs|url=http://wiki.nars2000.org/index.php/APL_Font|website=wiki.nars2000.org|publisher=NARS2000|access-date=January 11, 2015}}</ref>):\n* The first to be executed (APL executes from rightmost to leftmost) is dyadic function <code>?</code> (named <code>deal</code> when dyadic) that returns a [[array data structure|vector]] consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum \u2265 vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.<ref>{{cite web|last1=Fox|first1=Ralph L.|title=Systematically Random Numbers|url=http://www.sigapl.org/article1.php|website=www.sigapl.org|publisher=SIGAPL|access-date=January 11, 2015}}</ref>\n* This vector is then ''assigned'' (<code>\u2190</code>) to the variable <code>x</code>, because it is needed later.\n* This vector is then ''sorted'' in ascending order by a monadic <code>\u234b</code> function, which has as its right argument everything to the right of it up to the next unbalanced ''close-bracket'' or close-parenthesis. The result of <code>\u234b</code> is the indices that will put its argument into ascending order.\n* Then the output of <code>\u234b</code> is used to index the variable <code>x</code>, which we saved earlier for this purpose, thereby selecting its items in ''ascending'' sequence.\n\nSince there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.\n\n<code>?</code> also has a monadic equivalent called <code>roll</code>, which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a [[role-playing game]] program might use the expression <code>?20</code> to roll a twenty-sided die.\n\n==== Prime numbers ====\nThe following expression finds all [[prime number]]s from 1 to R. In both time and space, the calculation complexity is <math>O(R^2)\\,\\!</math> (in [[Big O notation]]).\n\n<source lang=\"apl\">\n(~R\u220aR\u2218.\u00d7R)/R\u21901\u2193\u03b9R\n</source>\n\nExecuted from right to left, this means:\n* ''[[Iota]]'' <code>\u03b9</code> creates a vector containing [[integer]]s from <code>1</code> to <code>R</code> (if <code>R= 6</code> at the start of the program, <code>\u03b9R</code> is <code>1 2 3 4 5 6</code>)\n* ''Drop'' first element of this vector (<code>\u2193</code> function), i.e., <code>1</code>. So <code>1\u2193\u03b9R</code> is <code>2 3 4 5 6</code>\n* ''Set'' <code>R</code> to the new vector (<code>\u2190</code>, ''assignment'' primitive), i.e., <code>2 3 4 5 6</code>\n* The <code>/</code> ''reduction'' operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses):\n* Generate ''[[outer product]]'' of <code>R</code> multiplied by <code>R</code>, i.e., a matrix that is the ''[[multiplication table]]'' of R by R (<code>\u00b0.\u00d7</code> operator), i.e.,\n\n{| class=\"wikitable\" {{ts|ar}}\n|-\n| 4\n| 6\n| 8\n| 10\n| 12\n|-\n| 6\n| 9\n| 12\n| 15\n| 18\n|-\n| 8\n| 12\n| 16\n| 20\n| 24\n|-\n| 10\n| 15\n| 20\n| 25\n| 30\n|-\n| 12\n| 18\n| 24\n| 30\n| 36\n|}\n* Build a vector the same length as <code>R</code> with <code>1</code> in each place where the corresponding number in <code>R</code> is in the outer product matrix (<code>\u2208</code>, ''set inclusion'' or ''element of'' or ''[[Epsilon]]'' operator), i.e., <code>0 0 1 0 1</code>\n* Logically negate (''not'') values in the vector (change zeros to ones and ones to zeros) (<code>\u223c</code>, logical ''not'' or ''[[Tilde]]'' operator), i.e., <code>1 1 0 1 0</code>\n* Select the items in <code>R</code> for which the corresponding element is <code>1</code> (<code>/</code> ''reduction'' operator), i.e., <code>2 3 5</code>\n(Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that <code>\u03b96</code> is <code>0 1 2 3 4 5</code>, which is convenient for some calculations.)\n\n==== Sorting ====\nThe following expression [[sorting|sorts]] a word list stored in matrix X according to word length:\n\n<source lang=\"apl\">\nX[\u234bX+.\u2260' ';]\n</source>\n\n==== Game of Life ====\nThe following function \"life\", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to [[Conway's Game of Life]]. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.\n\n<source lang=\"apl\">\nlife\u2190{\u21911 \u2375\u2228.\u22273 4=+/,\u00af1 0 1\u2218.\u2296\u00af1 0 1\u2218.\u233d\u2282\u2375}\n</source>\n\n==== HTML tags removal ====\nIn the following example, also Dyalog, the first line assigns some HTML code to a variable <code>txt</code> and then uses an APL expression to remove all the HTML tags ([http://aplwiki.com/AplIn20Minutes#Extract_content_from_Code explanation]):\n\n<source lang=\"apl\">\n      txt\u2190'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'\n      {\u2375 /\u2368 ~{\u2375\u2228\u2260\\\u2375}\u2375\u220a'<>'} txt\nThis is emphasized text.\n</source>\n\n", "attributes": [{"name": "Main", "values": [{"name": "1", "value": "APL (codepage)"}, {"name": "2", "value": "APL syntax and symbols#Monadic functions"}, {"name": "l2", "value": "syntax and symbols."}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Texas Instruments"}, {"name": "title", "value": "TI 745 full page ad: Introducing a New Set of Characters"}, {"name": "journal", "value": "Computerworld"}, {"name": "date", "value": "1977"}, {"name": "volume", "value": "11"}, {"name": "issue", "value": "27"}, {"name": "page", "value": "32"}, {"name": "url", "value": "https://books.google.com/?id=wMe6erbb5V4C&pg=PA32&lpg=PA32&dq=apl+terminal+%22texas+instruments%22&q=apl%20terminal%20%22texas%20instruments%22"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Dyalog"}, {"name": "title", "value": "APL Fonts and Keyboards"}, {"name": "url", "value": "http://www.dyalog.com/apl-font-keyboard.htm"}, {"name": "website", "value": "www.dyalog.com"}, {"name": "publisher", "value": "Dyalog"}, {"name": "access-date", "value": "January 19, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Smith"}, {"name": "first1", "value": "Bob"}, {"name": "title", "value": "NARS2000 Keyboard"}, {"name": "url", "value": "http://www.sudleyplace.com/APL/Keyboard.ahtml"}, {"name": "website", "value": "www.sudleyplace.com"}, {"name": "publisher", "value": "Bob Smith / NARS2000"}, {"name": "access-date", "value": "January 19, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL Ltd"}, {"name": "title", "value": "Introduction to APL \u2013 APL Symbols"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/introduction_chapter1.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL Ltd"}, {"name": "access-date", "value": "January 8, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Brown"}, {"name": "first1", "value": "James A."}, {"name": "last2", "value": "Hawks"}, {"name": "first2", "value": "Brent"}, {"name": "last3", "value": "Trimble"}, {"name": "first3", "value": "Ray"}, {"name": "title", "value": "Extending the APL character set"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "1993"}, {"name": "volume", "value": "24"}, {"name": "issue", "value": "1"}, {"name": "pages", "value": "41\u201346"}, {"name": "doi", "value": "10.1145/166198.166203"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Kromberg"}, {"name": "first1", "value": "Morten"}, {"name": "title", "value": "Unicode Support for APL"}, {"name": "url", "value": "http://archive.vector.org.uk/art10500090"}, {"name": "website", "value": "archive.vector.org.uk"}, {"name": "publisher", "value": "Vector, Journal of the British APL Association"}, {"name": "access-date", "value": "January 8, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Hsu"}, {"name": "first1", "value": "Aaron"}, {"name": "title", "value": "Computer Science Outreach and Education with APL"}, {"name": "url", "value": "http://video.dyalog.com/Dyalog13/?v=kIItfQJEVdM"}, {"name": "publisher", "value": "Dyalog, Ltd."}, {"name": "access-date", "value": "July 15, 2016"}]}, {"name": "citation needed", "values": [{"name": "date", "value": "July 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL"}, {"name": "title", "value": "Operators"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter5.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL"}, {"name": "access-date", "value": "January 12, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Primitive Functions"}, {"name": "title", "value": "Primitive Functions"}, {"name": "url", "value": "http://www.microapl.co.uk/apl_help/ch_020_010_140.htm"}, {"name": "website", "value": "www.microapl.co.uk/"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Workspace"}, {"name": "title", "value": "The Workspace"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter2.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://catpad.net/michael/apl"}, {"name": "title", "value": "example"}, {"name": "publisher", "value": "Catpad.net"}, {"name": "access-date", "value": "June 17, 2013"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20130708114840/http://catpad.net/michael/apl/"}, {"name": "archive-date", "value": "July 8, 2013"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "APL Symbols"}, {"name": "title", "value": "Entering APL Symbols"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/introduction_chapter2.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20130920071911/http://www.jsoftware.com/papers/tot.htm"}, {"name": "date", "value": "2013-09-20"}]}, {"name": "Who", "values": [{"name": "date", "value": "March 2015"}]}, {"name": "cn", "values": [{"name": "date", "value": "December 2019"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "Batenburg"}, {"name": "title", "value": "APL Efficiency"}, {"name": "url", "value": "http://www.ekevanbatenburg.nl/PRVAPL.HTML"}, {"name": "website", "value": "www.ekevanbatenburg.nl"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Vaxman"}, {"name": "title", "value": "APL Great Programming"}, {"name": "url", "value": "http://www.vaxman.de/publications/apl_slides.pdf"}, {"name": "website", "value": "www.vaxman.de"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite journal ", "values": [{"name": "last", "value": "Janko"}, {"name": "first", "value": "Wolfgang"}, {"name": "title", "value": "Investigation into the efficiency of using APL for the programming of an inference machine"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "May 1987"}, {"name": "volume", "value": "17"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "450\u2013456"}, {"name": "doi", "value": "10.1145/384282.28372"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Borealis"}, {"name": "title", "value": "Why APL?"}, {"name": "url", "value": "http://www.aplborealis.com/whyapl.html"}, {"name": "website", "value": "www.aplborealis.com"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Iverson"}, {"name": "first", "value": "Kenneth E."}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "title", "value": "A Dictionary of APL"}, {"name": "url", "value": "http://www.jsoftware.com/papers/APLDictionary.htm"}, {"name": "website", "value": "www.jsoftware.com"}, {"name": "publisher", "value": "JSoftware; Iverson Estate"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.microapl.co.uk/APL/apl_concepts_chapter6.html"}, {"name": "title", "value": "APL concepts"}, {"name": "publisher", "value": "Microapl.co.uk"}, {"name": "access-date", "value": "February 3, 2010"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.nial.com/ArrayTheory.html"}, {"name": "title", "value": "Nested array theory"}, {"name": "publisher", "value": "Nial.com"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "archive-url", "value": "https://web.archive.org/web/20110709072354/http://www.nial.com/ArrayTheory.html"}, {"name": "archive-date", "value": "2011-07-09"}, {"name": "url-status", "value": "dead"}]}, {"name": "ISBN", "values": [{"name": "1", "value": "91-44-13162-3"}]}, {"name": "Main", "values": [{"name": "1", "value": "APL syntax and symbols"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Iverson"}, {"name": "first", "value": "Kenneth E."}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "title", "value": "APL Syntax and Semantics"}, {"name": "url", "value": "http://www.jsoftware.com/papers/APLSyntaxSemantics.htm"}, {"name": "website", "value": "www.jsoftware.com"}, {"name": "publisher", "value": "I. P. Sharp Associates"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Dyalog APL/W"}, {"name": "title", "value": "Producing a standalone 'Hello World' program in APL"}, {"name": "url", "value": "https://www.youtube.com/watch?v=X8HGPJhHSRY"}, {"name": "website", "value": "www.youtube.com"}, {"name": "publisher", "value": "Dyalog-APLtrainer"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "code", "values": [{"name": "1", "value": "2\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2^3"}]}, {"name": "code", "values": [{"name": "1", "value": "2**3"}]}, {"name": "code", "values": [{"name": "1", "value": "2\u00d73"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "^3"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2.71828\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "X"}]}, {"name": "code", "values": [{"name": "1", "value": "(+/X)\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u00f7"}]}, {"name": "code", "values": [{"name": "1", "value": "X\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "+/X"}]}, {"name": "code", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}, {"name": "sxhl", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL"}, {"name": "title", "value": "APL Primitives"}, {"name": "url", "value": "http://www.microapl.co.uk/apl_help/ch_020_020.htm"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "NARS2000"}, {"name": "title", "value": "APL Font \u2013 Extra APL Glyphs"}, {"name": "url", "value": "http://wiki.nars2000.org/index.php/APL_Font"}, {"name": "website", "value": "wiki.nars2000.org"}, {"name": "publisher", "value": "NARS2000"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Fox"}, {"name": "first1", "value": "Ralph L."}, {"name": "title", "value": "Systematically Random Numbers"}, {"name": "url", "value": "http://www.sigapl.org/article1.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "SIGAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "ts", "values": [{"name": "1", "value": "ar"}]}], "id": 10}, {"title": " Character set ", "paragraphs": "{{Main|APL (codepage)|APL syntax and symbols#Monadic functions|l2=syntax and symbols.}}\n\nAPL has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference. In the 1960s and 1970s, few terminal devices and even display monitors could reproduce the APL character set. The most popular ones employed the [[IBM Selectric]] print mechanism used with a special APL type element. One of the early APL [[Computer terminal|line terminals]] (line-mode operation only, ''not'' full screen) was the Texas Instruments TI Model 745 (circa 1977) with the full APL character set<ref>{{cite journal |last1=Texas Instruments |title=TI 745 full page ad: Introducing a New Set of Characters |journal=Computerworld|date=1977 |volume=11 |issue=27 |page=32 |url=https://books.google.com/?id=wMe6erbb5V4C&pg=PA32&lpg=PA32&dq=apl+terminal+%22texas+instruments%22&q=apl%20terminal%20%22texas%20instruments%22 |access-date=January 20, 2015}}</ref> which featured [[Duplex (telecommunications)|half and full duplex]] [[telecommunication]]s modes, for interacting with an APL [[time-sharing]] service or remote mainframe to run a remote computer job, [[Remote job entry|called an RJE]].\n\nOver time, with the universal use of high-quality graphic displays, printing devices and [[Unicode]] support, the APL character font problem has largely been eliminated. However, entering APL characters requires the use of [[input method editor]]s, keyboard mappings, virtual/on-screen APL symbol sets,<ref>{{cite web|last1=Dyalog|title=APL Fonts and Keyboards|url=http://www.dyalog.com/apl-font-keyboard.htm|website=www.dyalog.com|publisher=Dyalog|access-date=January 19, 2015}}</ref><ref>{{cite web|last1=Smith|first1=Bob|title=NARS2000 Keyboard|url=http://www.sudleyplace.com/APL/Keyboard.ahtml|website=www.sudleyplace.com|publisher=Bob Smith / NARS2000|access-date=January 19, 2015}}</ref> or easy-reference printed keyboard cards which can frustrate beginners accustomed to other programming languages.<ref>{{cite web|last1=MicroAPL Ltd|title=Introduction to APL \u2013 APL Symbols|url=http://www.microapl.co.uk/apl/introduction_chapter1.html|website=www.microapl.co.uk|publisher=MicroAPL Ltd|access-date=January 8, 2015}}</ref><ref>{{cite journal|last1=Brown|first1=James A.|last2=Hawks|first2=Brent|last3=Trimble|first3=Ray|title=Extending the APL character set|journal=ACM SIGAPL APL Quote Quad|date=1993|volume=24|issue=1|pages=41\u201346|doi=10.1145/166198.166203}}</ref><ref>{{cite web|last1=Kromberg|first1=Morten|title=Unicode Support for APL|url=http://archive.vector.org.uk/art10500090|website=archive.vector.org.uk|publisher=Vector, Journal of the British APL Association|access-date=January 8, 2015}}</ref> With beginners who have no prior experience with other programming languages, a study involving high school students found that typing and using APL characters did not hinder the students in any measurable way.<ref>{{cite web|last1=Hsu|first1=Aaron|title=Computer Science Outreach and Education with APL|url=http://video.dyalog.com/Dyalog13/?v=kIItfQJEVdM|publisher=Dyalog, Ltd.|access-date=July 15, 2016}}</ref>\n\nIn defense of APL use, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating systems such as Microsoft Windows.<ref>Dyalog, Inc. APL fonts and keyboards. http://www.dyalog.com/apl-font-keyboard.htm</ref> The reported productivity gains assume that one will spend enough time working in APL to make it worthwhile to memorize the symbols, their semantics, and keyboard mappings, not to mention a substantial number of idioms for common tasks.{{citation needed|date=July 2015}}\n\n", "attributes": [{"name": "Main", "values": [{"name": "1", "value": "APL (codepage)"}, {"name": "2", "value": "APL syntax and symbols#Monadic functions"}, {"name": "l2", "value": "syntax and symbols."}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Texas Instruments"}, {"name": "title", "value": "TI 745 full page ad: Introducing a New Set of Characters"}, {"name": "journal", "value": "Computerworld"}, {"name": "date", "value": "1977"}, {"name": "volume", "value": "11"}, {"name": "issue", "value": "27"}, {"name": "page", "value": "32"}, {"name": "url", "value": "https://books.google.com/?id=wMe6erbb5V4C&pg=PA32&lpg=PA32&dq=apl+terminal+%22texas+instruments%22&q=apl%20terminal%20%22texas%20instruments%22"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Dyalog"}, {"name": "title", "value": "APL Fonts and Keyboards"}, {"name": "url", "value": "http://www.dyalog.com/apl-font-keyboard.htm"}, {"name": "website", "value": "www.dyalog.com"}, {"name": "publisher", "value": "Dyalog"}, {"name": "access-date", "value": "January 19, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Smith"}, {"name": "first1", "value": "Bob"}, {"name": "title", "value": "NARS2000 Keyboard"}, {"name": "url", "value": "http://www.sudleyplace.com/APL/Keyboard.ahtml"}, {"name": "website", "value": "www.sudleyplace.com"}, {"name": "publisher", "value": "Bob Smith / NARS2000"}, {"name": "access-date", "value": "January 19, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL Ltd"}, {"name": "title", "value": "Introduction to APL \u2013 APL Symbols"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/introduction_chapter1.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL Ltd"}, {"name": "access-date", "value": "January 8, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Brown"}, {"name": "first1", "value": "James A."}, {"name": "last2", "value": "Hawks"}, {"name": "first2", "value": "Brent"}, {"name": "last3", "value": "Trimble"}, {"name": "first3", "value": "Ray"}, {"name": "title", "value": "Extending the APL character set"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "1993"}, {"name": "volume", "value": "24"}, {"name": "issue", "value": "1"}, {"name": "pages", "value": "41\u201346"}, {"name": "doi", "value": "10.1145/166198.166203"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Kromberg"}, {"name": "first1", "value": "Morten"}, {"name": "title", "value": "Unicode Support for APL"}, {"name": "url", "value": "http://archive.vector.org.uk/art10500090"}, {"name": "website", "value": "archive.vector.org.uk"}, {"name": "publisher", "value": "Vector, Journal of the British APL Association"}, {"name": "access-date", "value": "January 8, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Hsu"}, {"name": "first1", "value": "Aaron"}, {"name": "title", "value": "Computer Science Outreach and Education with APL"}, {"name": "url", "value": "http://video.dyalog.com/Dyalog13/?v=kIItfQJEVdM"}, {"name": "publisher", "value": "Dyalog, Ltd."}, {"name": "access-date", "value": "July 15, 2016"}]}, {"name": "citation needed", "values": [{"name": "date", "value": "July 2015"}]}], "id": 11}, {"title": " Design ", "paragraphs": "Unlike traditionally structured programming languages, APL code is typically structured as chains of [[unary operation|monadic]] or [[binary operation|dyadic]] [[function (programming)|functions]], and [[higher-order function|operators]]<ref name=\"MicroAOL_Operators\">{{cite web|last1=MicroAPL|title=Operators|url=http://www.microapl.co.uk/apl/apl_concepts_chapter5.html|website=www.microapl.co.uk|publisher=MicroAPL|access-date=January 12, 2015}}</ref> acting on [[array data type|arrays]].<ref>{{cite web|last1=Primitive Functions|title=Primitive Functions|url=http://www.microapl.co.uk/apl_help/ch_020_010_140.htm|website=www.microapl.co.uk/|access-date=January 1, 2015}}</ref> APL has many nonstandard ''primitives'' (functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same [[operator precedence|precedence]], and always associate to the right. Thus, APL is ''read'' or best understood from [[APL syntax and symbols#Syntax rules|right-to-left]].\n\nEarly APL implementations (circa 1970 or so) had no programming loop-[[control flow|flow control]] structures, such as <code>do</code> or <code>while</code> loops, and <code>if-then-else</code> constructs. Instead, they used array operations, and use of [[structured programming]] constructs was often not necessary, since an operation could be performed on a full array in one statement. For example, the <code>iota</code> function (<code>\u03b9</code>) can replace for-loop [[iteration]]: \u03b9N when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated.\n\nThe APL environment is called a ''workspace''. In a workspace the user can define programs and data, i.e., the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.<ref>{{cite web|last1=Workspace|title=The Workspace|url=http://www.microapl.co.uk/apl/apl_concepts_chapter2.html|website=www.microapl.co.uk|access-date=January 1, 2015}}</ref> In the examples below, the APL interpreter first types six spaces before awaiting the user's input. Its own output starts in column one.\n{| class=\"wikitable\"\n|-\n| width=\"200pt\" | <source lang=\"apl\">      n \u2190 4 5 6 7</source>\n| Assigns [[coordinate vector|vector]] of values, {4 5 6 7}, to variable <tt>n</tt>, an array create operation. An equivalent yet more concise APL expression would be <source lang=\"apl\" inline>n \u2190 3 + \u23734</source>. Multiple values are stored in array <code>n</code>, the operation performed ''without formal loops or control flow language''.\n|-\n| <source lang=\"apl\">      n \n4 5 6 7</source>\n| Display the contents of <tt>n</tt>, currently an array or vector.\n|-\n| <source lang=\"apl\">      n+4\n8 9 10 11</source>\n| 4 is now added to all elements of vector <tt>n</tt>, creating a 4-element vector {8 9 10 11}.<br /> As above, APL's interpreter displays the result because the expression's value was not assigned to a variable (with a <tt>\u2190</tt>).\n|-\n| <source lang=\"apl\">      +/n\n22</source>\n| APL displays the sum of components of the vector <tt>n</tt>, i.e., <tt>22 (= 4 + 5 + 6 + 7)</tt> using a very compact notation: read +/ as \"plus, over...\" and a slight change would be \"multiply, over...\"\n|-\n| <source lang=\"apl\">      m \u2190 +/(3+\u23734)\n      m\n22</source>\n| These operations can be combined into one statement, remembering that APL evaluates expressions right to left: first <source lang=\"apl\" inline>\u23734</source> creates an array, <source lang=\"apl\" inline>[1,2,3,4]</source>, then 3 is added to each component, which are summed together and the result stored in variable <tt>m</tt>, finally displayed.\nIn normal mathematical notation, it is equivalent to: <math>\\displaystyle m= \\sum\\limits_{i=1}^4 (i+3)</math>. Recall that mathematical expressions are not read or evaluated from right-to-left.\n|}\n\nThe user can save the workspace with all values, programs, and execution status.\n\nAPL uses a set of non-[[ASCII]] symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for single instruction, multiple data ([[SIMD]]) vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing [[Conway's Game of Life]] in one line of code.<ref>{{cite web|url=http://catpad.net/michael/apl |title=example |publisher=Catpad.net |access-date=June 17, 2013 |url-status=dead |archive-url=https://web.archive.org/web/20130708114840/http://catpad.net/michael/apl/ |archive-date=July 8, 2013 }}</ref> In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code.\n\nBecause of the unusual [[character set]], many programmers use special [[computer keyboard|keyboards]] with APL keytops to write APL code.<ref>{{cite web|last1=APL Symbols|title=Entering APL Symbols|url=http://www.microapl.co.uk/apl/introduction_chapter2.html|website=www.microapl.co.uk|access-date=January 1, 2015}}</ref> Although there are various ways to write APL code using only ASCII characters,<ref>[http://www.math.uwaterloo.ca/apl_archives/apl/translit.schemes Dickey, Lee, A list of APL Transliteration Schemes], 1993</ref> in practice it is almost never done. (This may be thought to support Iverson's thesis about [[Linguistic relativity|notation as a tool of thought]].<ref>Iverson K.E.,\n\"[http://www.jsoftware.com/papers/tot.htm Notation as a Tool of Thought] {{Webarchive|url=https://web.archive.org/web/20130920071911/http://www.jsoftware.com/papers/tot.htm |date=2013-09-20 }}\", ''Communications of the ACM'', 23: 444-465 (August 1980).</ref>) Most if not all modern implementations use standard keyboard layouts, with special mappings or [[input method editor]]s to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font.\n\nAdvocates of APL{{Who|date=March 2015}} claim that the examples of so-called ''write-only code'' (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology.{{cn|date=December 2019}}\n\nThey also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be reduced greatly. Many APL advocates and practitioners also view standard programming languages such as [[COBOL]] and [[Java (programming language)|Java]] as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.<ref>{{cite web |last1=Batenburg |title=APL Efficiency |url=http://www.ekevanbatenburg.nl/PRVAPL.HTML |website=www.ekevanbatenburg.nl |access-date=January 1, 2015}}</ref><ref>{{cite web |last=Vaxman |title=APL Great Programming |url=http://www.vaxman.de/publications/apl_slides.pdf |website=www.vaxman.de |access-date=January 1, 2015}}</ref><ref>{{cite journal |last=Janko |first=Wolfgang |title=Investigation into the efficiency of using APL for the programming of an inference machine |journal= ACM SIGAPL APL Quote Quad|date=May 1987 |volume=17 |issue=4 |pages=450\u2013456 |doi=10.1145/384282.28372}}</ref><ref>{{cite web |last=Borealis |title=Why APL? |url=http://www.aplborealis.com/whyapl.html |website=www.aplborealis.com |access-date=January 1, 2015}}</ref>\n\n", "attributes": [{"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL"}, {"name": "title", "value": "Operators"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter5.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL"}, {"name": "access-date", "value": "January 12, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Primitive Functions"}, {"name": "title", "value": "Primitive Functions"}, {"name": "url", "value": "http://www.microapl.co.uk/apl_help/ch_020_010_140.htm"}, {"name": "website", "value": "www.microapl.co.uk/"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Workspace"}, {"name": "title", "value": "The Workspace"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/apl_concepts_chapter2.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://catpad.net/michael/apl"}, {"name": "title", "value": "example"}, {"name": "publisher", "value": "Catpad.net"}, {"name": "access-date", "value": "June 17, 2013"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20130708114840/http://catpad.net/michael/apl/"}, {"name": "archive-date", "value": "July 8, 2013"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "APL Symbols"}, {"name": "title", "value": "Entering APL Symbols"}, {"name": "url", "value": "http://www.microapl.co.uk/apl/introduction_chapter2.html"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "Webarchive", "values": [{"name": "url", "value": "https://web.archive.org/web/20130920071911/http://www.jsoftware.com/papers/tot.htm"}, {"name": "date", "value": "2013-09-20"}]}, {"name": "Who", "values": [{"name": "date", "value": "March 2015"}]}, {"name": "cn", "values": [{"name": "date", "value": "December 2019"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "Batenburg"}, {"name": "title", "value": "APL Efficiency"}, {"name": "url", "value": "http://www.ekevanbatenburg.nl/PRVAPL.HTML"}, {"name": "website", "value": "www.ekevanbatenburg.nl"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Vaxman"}, {"name": "title", "value": "APL Great Programming"}, {"name": "url", "value": "http://www.vaxman.de/publications/apl_slides.pdf"}, {"name": "website", "value": "www.vaxman.de"}, {"name": "access-date", "value": "January 1, 2015"}]}, {"name": "cite journal ", "values": [{"name": "last", "value": "Janko"}, {"name": "first", "value": "Wolfgang"}, {"name": "title", "value": "Investigation into the efficiency of using APL for the programming of an inference machine"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "May 1987"}, {"name": "volume", "value": "17"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "450\u2013456"}, {"name": "doi", "value": "10.1145/384282.28372"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Borealis"}, {"name": "title", "value": "Why APL?"}, {"name": "url", "value": "http://www.aplborealis.com/whyapl.html"}, {"name": "website", "value": "www.aplborealis.com"}, {"name": "access-date", "value": "January 1, 2015"}]}], "id": 12}, {"title": " Terminology ", "paragraphs": "APL makes a clear distinction between ''functions'' and ''operators''.<ref name=\"MicroAOL_Operators\" /><ref>{{cite web |last=Iverson |first=Kenneth E. |author-link=Kenneth E. Iverson |title=A Dictionary of APL |url=http://www.jsoftware.com/papers/APLDictionary.htm|website=www.jsoftware.com |publisher=JSoftware; Iverson Estate |access-date=January 20, 2015}}</ref> Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to [[higher-order function]]s) take functions or arrays as arguments, and derive related functions. For example, the ''sum'' function is derived by applying the ''reduction'' operator to the ''addition'' function. Applying the same reduction operator to the ''maximum'' function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms ''verb'' for ''function'' and ''adverb'' or ''conjunction'' for ''operator''.\n\nAPL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as ''primitives''. Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment.\n\nSome words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science.\n\n{| class=\"wikitable\"\n|-\n! Term\n! Description\n|-\n! function\n| operation or mapping that takes zero, one (right) or two (left & right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be:\n* Primitive: built-in and represented by a single glyph;<ref name=\"aplxch6\">{{cite web |url=http://www.microapl.co.uk/APL/apl_concepts_chapter6.html |title=APL concepts |publisher=Microapl.co.uk |access-date=February 3, 2010}}</ref>\n* Defined: as a named and ordered collection of program statements;<ref name=\"aplxch6\" />\n* Derived: as a combination of an operator with its arguments.<ref name=\"aplxch6\" />\n|-\n! array\n| data valued object of zero or more [[orthogonal]] dimensions in [[Row- and column-major order|row-major]] order in which each item is a primitive scalar datum or another array.<ref>{{cite web |url=http://www.nial.com/ArrayTheory.html |title=Nested array theory |publisher=Nial.com |access-date=February 3, 2010 |archive-url=https://web.archive.org/web/20110709072354/http://www.nial.com/ArrayTheory.html |archive-date=2011-07-09 |url-status=dead }}</ref>\n|-\n! niladic\n| not taking or requiring any arguments,<ref name=\"Bohman_Froberg\">\"Programmera i APL\", Bohman, Fr\u00f6berg, [[Studentlitteratur]], {{ISBN|91-44-13162-3}}</ref>\n|-\n! monadic\n| requiring only one argument; on the right for a function, on the left for an operator, unary<ref name=\"Bohman_Froberg\" />\n|-\n! dyadic\n| requiring both a left and a right argument, binary<ref name=\"Bohman_Froberg\" />\n|-\n! ambivalent or monadic\n| capable of use in a monadic or dyadic context, permitting its left argument to be elided<ref name=\"aplxch6\" />\n|-\n! operator\n| operation or mapping that takes one (left) or two (left & right) function or array valued arguments (operands) and derives a function. An operator may be:\n* Primitive: built-in and represented by a single glyph;<ref name=\"aplxch6\" />\n* Defined: as a named and ordered collection of program statements.<ref name=\"aplxch6\" />\n|}\n\n", "attributes": [{"name": "cite web ", "values": [{"name": "last", "value": "Iverson"}, {"name": "first", "value": "Kenneth E."}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "title", "value": "A Dictionary of APL"}, {"name": "url", "value": "http://www.jsoftware.com/papers/APLDictionary.htm"}, {"name": "website", "value": "www.jsoftware.com"}, {"name": "publisher", "value": "JSoftware; Iverson Estate"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.microapl.co.uk/APL/apl_concepts_chapter6.html"}, {"name": "title", "value": "APL concepts"}, {"name": "publisher", "value": "Microapl.co.uk"}, {"name": "access-date", "value": "February 3, 2010"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.nial.com/ArrayTheory.html"}, {"name": "title", "value": "Nested array theory"}, {"name": "publisher", "value": "Nial.com"}, {"name": "access-date", "value": "February 3, 2010"}, {"name": "archive-url", "value": "https://web.archive.org/web/20110709072354/http://www.nial.com/ArrayTheory.html"}, {"name": "archive-date", "value": "2011-07-09"}, {"name": "url-status", "value": "dead"}]}, {"name": "ISBN", "values": [{"name": "1", "value": "91-44-13162-3"}]}], "id": 13}, {"title": " Syntax ", "paragraphs": "{{Main|APL syntax and symbols}}\nAPL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, and tools to experiment on them.<ref>{{cite web |last=Iverson |first=Kenneth E. |author-link=Kenneth E. Iverson |title=APL Syntax and Semantics |url=http://www.jsoftware.com/papers/APLSyntaxSemantics.htm|website=www.jsoftware.com |publisher=I. P. Sharp Associates |access-date=January 11, 2015}}</ref>\n\n", "attributes": [{"name": "Main", "values": [{"name": "1", "value": "APL syntax and symbols"}]}, {"name": "cite web ", "values": [{"name": "last", "value": "Iverson"}, {"name": "first", "value": "Kenneth E."}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "title", "value": "APL Syntax and Semantics"}, {"name": "url", "value": "http://www.jsoftware.com/papers/APLSyntaxSemantics.htm"}, {"name": "website", "value": "www.jsoftware.com"}, {"name": "publisher", "value": "I. P. Sharp Associates"}, {"name": "access-date", "value": "January 11, 2015"}]}], "id": 14}, {"title": " Examples ", "paragraphs": "==== Hello, World ====\nThis displays \"[[Hello, world]]\":\n\n<source lang=\"apl\">\n'Hello, world'\n</source>\n'Hello World,' sample user session on YouTube<ref>{{cite web|last1=Dyalog APL/W|title=Producing a standalone 'Hello World' program in APL|url=https://www.youtube.com/watch?v=X8HGPJhHSRY|website=www.youtube.com|publisher=Dyalog-APLtrainer|access-date=January 11, 2015}}</ref>\n\nA design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.\n\nThe 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).\n\n==== Exponentiation ====\nAnother example of this theme is that exponentiation in APL is written as \"{{code|2\u22c63}}\", which indicates raising 2 to the power 3 (this would be written as \"{{code|2^3}}\" in some other languages and \"{{code|2**3}}\" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses {{code|2\u00d73}} for that. However, if no base is specified (as with the statement \"{{code|\u22c63}}\" in APL, or \"{{code|^3}}\" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant [[e (mathematical constant)|e]] (2.71828....), and so interpreting \"{{code|\u22c63}}\" as \"{{code|2.71828\u22c63}}\".\n\n====Simple statistics====\nSuppose that {{code|X}} is an array of numbers. Then {{code|(+/X)\u00f7\u2374X}} gives its average. Reading ''right-to-left'', {{code|\u2374X}} gives the number of elements in X, and since {{code|\u00f7}} is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of {{code|X\u00f7\u2374X}}, of each element of X divided by the number of elements in X), and {{code|+/X}} adds all the elements of X. Building on this, {{code|2=apl|((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}} calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so \n{{sxhl|2=apl|SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}}\nwould place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time.\n\n==== ''Pick 6'' lottery numbers ====\nThis following immediate-mode expression generates a typical set of ''Pick 6'' [[lottery]] numbers: six [[pseudo-random]] [[integer]]s ranging from 1 to 40, ''guaranteed non-repeating'', and displays them sorted in ascending order:\n\n<source lang=\"apl\">\nx[\u234bx\u21906?40]\n</source>\n\nThe above does a lot, concisely; although it seems complex to a new [[wiktionary:APLer|APLer]]. It combines the following APL ''functions'' (also called ''primitives''<ref>{{cite web|last1=MicroAPL|title=APL Primitives|url=http://www.microapl.co.uk/apl_help/ch_020_020.htm|website=www.microapl.co.uk|publisher=MicroAPL|access-date=January 11, 2015}}</ref> and ''glyphs''<ref>{{cite web|last1=NARS2000|title=APL Font \u2013 Extra APL Glyphs|url=http://wiki.nars2000.org/index.php/APL_Font|website=wiki.nars2000.org|publisher=NARS2000|access-date=January 11, 2015}}</ref>):\n* The first to be executed (APL executes from rightmost to leftmost) is dyadic function <code>?</code> (named <code>deal</code> when dyadic) that returns a [[array data structure|vector]] consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum \u2265 vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.<ref>{{cite web|last1=Fox|first1=Ralph L.|title=Systematically Random Numbers|url=http://www.sigapl.org/article1.php|website=www.sigapl.org|publisher=SIGAPL|access-date=January 11, 2015}}</ref>\n* This vector is then ''assigned'' (<code>\u2190</code>) to the variable <code>x</code>, because it is needed later.\n* This vector is then ''sorted'' in ascending order by a monadic <code>\u234b</code> function, which has as its right argument everything to the right of it up to the next unbalanced ''close-bracket'' or close-parenthesis. The result of <code>\u234b</code> is the indices that will put its argument into ascending order.\n* Then the output of <code>\u234b</code> is used to index the variable <code>x</code>, which we saved earlier for this purpose, thereby selecting its items in ''ascending'' sequence.\n\nSince there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.\n\n<code>?</code> also has a monadic equivalent called <code>roll</code>, which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a [[role-playing game]] program might use the expression <code>?20</code> to roll a twenty-sided die.\n\n==== Prime numbers ====\nThe following expression finds all [[prime number]]s from 1 to R. In both time and space, the calculation complexity is <math>O(R^2)\\,\\!</math> (in [[Big O notation]]).\n\n<source lang=\"apl\">\n(~R\u220aR\u2218.\u00d7R)/R\u21901\u2193\u03b9R\n</source>\n\nExecuted from right to left, this means:\n* ''[[Iota]]'' <code>\u03b9</code> creates a vector containing [[integer]]s from <code>1</code> to <code>R</code> (if <code>R= 6</code> at the start of the program, <code>\u03b9R</code> is <code>1 2 3 4 5 6</code>)\n* ''Drop'' first element of this vector (<code>\u2193</code> function), i.e., <code>1</code>. So <code>1\u2193\u03b9R</code> is <code>2 3 4 5 6</code>\n* ''Set'' <code>R</code> to the new vector (<code>\u2190</code>, ''assignment'' primitive), i.e., <code>2 3 4 5 6</code>\n* The <code>/</code> ''reduction'' operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses):\n* Generate ''[[outer product]]'' of <code>R</code> multiplied by <code>R</code>, i.e., a matrix that is the ''[[multiplication table]]'' of R by R (<code>\u00b0.\u00d7</code> operator), i.e.,\n\n{| class=\"wikitable\" {{ts|ar}}\n|-\n| 4\n| 6\n| 8\n| 10\n| 12\n|-\n| 6\n| 9\n| 12\n| 15\n| 18\n|-\n| 8\n| 12\n| 16\n| 20\n| 24\n|-\n| 10\n| 15\n| 20\n| 25\n| 30\n|-\n| 12\n| 18\n| 24\n| 30\n| 36\n|}\n* Build a vector the same length as <code>R</code> with <code>1</code> in each place where the corresponding number in <code>R</code> is in the outer product matrix (<code>\u2208</code>, ''set inclusion'' or ''element of'' or ''[[Epsilon]]'' operator), i.e., <code>0 0 1 0 1</code>\n* Logically negate (''not'') values in the vector (change zeros to ones and ones to zeros) (<code>\u223c</code>, logical ''not'' or ''[[Tilde]]'' operator), i.e., <code>1 1 0 1 0</code>\n* Select the items in <code>R</code> for which the corresponding element is <code>1</code> (<code>/</code> ''reduction'' operator), i.e., <code>2 3 5</code>\n(Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that <code>\u03b96</code> is <code>0 1 2 3 4 5</code>, which is convenient for some calculations.)\n\n==== Sorting ====\nThe following expression [[sorting|sorts]] a word list stored in matrix X according to word length:\n\n<source lang=\"apl\">\nX[\u234bX+.\u2260' ';]\n</source>\n\n==== Game of Life ====\nThe following function \"life\", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to [[Conway's Game of Life]]. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.\n\n<source lang=\"apl\">\nlife\u2190{\u21911 \u2375\u2228.\u22273 4=+/,\u00af1 0 1\u2218.\u2296\u00af1 0 1\u2218.\u233d\u2282\u2375}\n</source>\n\n==== HTML tags removal ====\nIn the following example, also Dyalog, the first line assigns some HTML code to a variable <code>txt</code> and then uses an APL expression to remove all the HTML tags ([http://aplwiki.com/AplIn20Minutes#Extract_content_from_Code explanation]):\n\n<source lang=\"apl\">\n      txt\u2190'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'\n      {\u2375 /\u2368 ~{\u2375\u2228\u2260\\\u2375}\u2375\u220a'<>'} txt\nThis is emphasized text.\n</source>\n\n", "attributes": [{"name": "cite web", "values": [{"name": "last1", "value": "Dyalog APL/W"}, {"name": "title", "value": "Producing a standalone 'Hello World' program in APL"}, {"name": "url", "value": "https://www.youtube.com/watch?v=X8HGPJhHSRY"}, {"name": "website", "value": "www.youtube.com"}, {"name": "publisher", "value": "Dyalog-APLtrainer"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "code", "values": [{"name": "1", "value": "2\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2^3"}]}, {"name": "code", "values": [{"name": "1", "value": "2**3"}]}, {"name": "code", "values": [{"name": "1", "value": "2\u00d73"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "^3"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2.71828\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "X"}]}, {"name": "code", "values": [{"name": "1", "value": "(+/X)\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u00f7"}]}, {"name": "code", "values": [{"name": "1", "value": "X\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "+/X"}]}, {"name": "code", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}, {"name": "sxhl", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL"}, {"name": "title", "value": "APL Primitives"}, {"name": "url", "value": "http://www.microapl.co.uk/apl_help/ch_020_020.htm"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "NARS2000"}, {"name": "title", "value": "APL Font \u2013 Extra APL Glyphs"}, {"name": "url", "value": "http://wiki.nars2000.org/index.php/APL_Font"}, {"name": "website", "value": "wiki.nars2000.org"}, {"name": "publisher", "value": "NARS2000"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Fox"}, {"name": "first1", "value": "Ralph L."}, {"name": "title", "value": "Systematically Random Numbers"}, {"name": "url", "value": "http://www.sigapl.org/article1.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "SIGAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "ts", "values": [{"name": "1", "value": "ar"}]}], "id": 15}, {"title": " Hello, World ", "paragraphs": "This displays \"[[Hello, world]]\":\n\n<source lang=\"apl\">\n'Hello, world'\n</source>\n'Hello World,' sample user session on YouTube<ref>{{cite web|last1=Dyalog APL/W|title=Producing a standalone 'Hello World' program in APL|url=https://www.youtube.com/watch?v=X8HGPJhHSRY|website=www.youtube.com|publisher=Dyalog-APLtrainer|access-date=January 11, 2015}}</ref>\n\nA design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages.\n\nThe 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter).\n\n", "attributes": [{"name": "cite web", "values": [{"name": "last1", "value": "Dyalog APL/W"}, {"name": "title", "value": "Producing a standalone 'Hello World' program in APL"}, {"name": "url", "value": "https://www.youtube.com/watch?v=X8HGPJhHSRY"}, {"name": "website", "value": "www.youtube.com"}, {"name": "publisher", "value": "Dyalog-APLtrainer"}, {"name": "access-date", "value": "January 11, 2015"}]}], "id": 16}, {"title": " Exponentiation ", "paragraphs": "Another example of this theme is that exponentiation in APL is written as \"{{code|2\u22c63}}\", which indicates raising 2 to the power 3 (this would be written as \"{{code|2^3}}\" in some other languages and \"{{code|2**3}}\" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses {{code|2\u00d73}} for that. However, if no base is specified (as with the statement \"{{code|\u22c63}}\" in APL, or \"{{code|^3}}\" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant [[e (mathematical constant)|e]] (2.71828....), and so interpreting \"{{code|\u22c63}}\" as \"{{code|2.71828\u22c63}}\".\n\n", "attributes": [{"name": "code", "values": [{"name": "1", "value": "2\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2^3"}]}, {"name": "code", "values": [{"name": "1", "value": "2**3"}]}, {"name": "code", "values": [{"name": "1", "value": "2\u00d73"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "^3"}]}, {"name": "code", "values": [{"name": "1", "value": "\u22c63"}]}, {"name": "code", "values": [{"name": "1", "value": "2.71828\u22c63"}]}], "id": 17}, {"title": "Simple statistics", "paragraphs": "Suppose that {{code|X}} is an array of numbers. Then {{code|(+/X)\u00f7\u2374X}} gives its average. Reading ''right-to-left'', {{code|\u2374X}} gives the number of elements in X, and since {{code|\u00f7}} is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of {{code|X\u00f7\u2374X}}, of each element of X divided by the number of elements in X), and {{code|+/X}} adds all the elements of X. Building on this, {{code|2=apl|((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}} calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so \n{{sxhl|2=apl|SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5}}\nwould place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time.\n\n", "attributes": [{"name": "code", "values": [{"name": "1", "value": "X"}]}, {"name": "code", "values": [{"name": "1", "value": "(+/X)\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "\u00f7"}]}, {"name": "code", "values": [{"name": "1", "value": "X\u00f7\u2374X"}]}, {"name": "code", "values": [{"name": "1", "value": "+/X"}]}, {"name": "code", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "((+/((X - (+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}, {"name": "sxhl", "values": [{"name": "2", "value": "apl"}, {"name": "1", "value": "SD\u2190((+/((X - AV\u2190(T\u2190+/X)\u00f7\u2374X)*2))\u00f7\u2374X)*0.5"}]}], "id": 18}, {"title": " ''Pick 6'' lottery numbers ", "paragraphs": "This following immediate-mode expression generates a typical set of ''Pick 6'' [[lottery]] numbers: six [[pseudo-random]] [[integer]]s ranging from 1 to 40, ''guaranteed non-repeating'', and displays them sorted in ascending order:\n\n<source lang=\"apl\">\nx[\u234bx\u21906?40]\n</source>\n\nThe above does a lot, concisely; although it seems complex to a new [[wiktionary:APLer|APLer]]. It combines the following APL ''functions'' (also called ''primitives''<ref>{{cite web|last1=MicroAPL|title=APL Primitives|url=http://www.microapl.co.uk/apl_help/ch_020_020.htm|website=www.microapl.co.uk|publisher=MicroAPL|access-date=January 11, 2015}}</ref> and ''glyphs''<ref>{{cite web|last1=NARS2000|title=APL Font \u2013 Extra APL Glyphs|url=http://wiki.nars2000.org/index.php/APL_Font|website=wiki.nars2000.org|publisher=NARS2000|access-date=January 11, 2015}}</ref>):\n* The first to be executed (APL executes from rightmost to leftmost) is dyadic function <code>?</code> (named <code>deal</code> when dyadic) that returns a [[array data structure|vector]] consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum \u2265 vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.<ref>{{cite web|last1=Fox|first1=Ralph L.|title=Systematically Random Numbers|url=http://www.sigapl.org/article1.php|website=www.sigapl.org|publisher=SIGAPL|access-date=January 11, 2015}}</ref>\n* This vector is then ''assigned'' (<code>\u2190</code>) to the variable <code>x</code>, because it is needed later.\n* This vector is then ''sorted'' in ascending order by a monadic <code>\u234b</code> function, which has as its right argument everything to the right of it up to the next unbalanced ''close-bracket'' or close-parenthesis. The result of <code>\u234b</code> is the indices that will put its argument into ascending order.\n* Then the output of <code>\u234b</code> is used to index the variable <code>x</code>, which we saved earlier for this purpose, thereby selecting its items in ''ascending'' sequence.\n\nSince there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that.\n\n<code>?</code> also has a monadic equivalent called <code>roll</code>, which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a [[role-playing game]] program might use the expression <code>?20</code> to roll a twenty-sided die.\n\n", "attributes": [{"name": "cite web", "values": [{"name": "last1", "value": "MicroAPL"}, {"name": "title", "value": "APL Primitives"}, {"name": "url", "value": "http://www.microapl.co.uk/apl_help/ch_020_020.htm"}, {"name": "website", "value": "www.microapl.co.uk"}, {"name": "publisher", "value": "MicroAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "NARS2000"}, {"name": "title", "value": "APL Font \u2013 Extra APL Glyphs"}, {"name": "url", "value": "http://wiki.nars2000.org/index.php/APL_Font"}, {"name": "website", "value": "wiki.nars2000.org"}, {"name": "publisher", "value": "NARS2000"}, {"name": "access-date", "value": "January 11, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Fox"}, {"name": "first1", "value": "Ralph L."}, {"name": "title", "value": "Systematically Random Numbers"}, {"name": "url", "value": "http://www.sigapl.org/article1.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "SIGAPL"}, {"name": "access-date", "value": "January 11, 2015"}]}], "id": 19}, {"title": " Prime numbers ", "paragraphs": "The following expression finds all [[prime number]]s from 1 to R. In both time and space, the calculation complexity is <math>O(R^2)\\,\\!</math> (in [[Big O notation]]).\n\n<source lang=\"apl\">\n(~R\u220aR\u2218.\u00d7R)/R\u21901\u2193\u03b9R\n</source>\n\nExecuted from right to left, this means:\n* ''[[Iota]]'' <code>\u03b9</code> creates a vector containing [[integer]]s from <code>1</code> to <code>R</code> (if <code>R= 6</code> at the start of the program, <code>\u03b9R</code> is <code>1 2 3 4 5 6</code>)\n* ''Drop'' first element of this vector (<code>\u2193</code> function), i.e., <code>1</code>. So <code>1\u2193\u03b9R</code> is <code>2 3 4 5 6</code>\n* ''Set'' <code>R</code> to the new vector (<code>\u2190</code>, ''assignment'' primitive), i.e., <code>2 3 4 5 6</code>\n* The <code>/</code> ''reduction'' operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses):\n* Generate ''[[outer product]]'' of <code>R</code> multiplied by <code>R</code>, i.e., a matrix that is the ''[[multiplication table]]'' of R by R (<code>\u00b0.\u00d7</code> operator), i.e.,\n\n{| class=\"wikitable\" {{ts|ar}}\n|-\n| 4\n| 6\n| 8\n| 10\n| 12\n|-\n| 6\n| 9\n| 12\n| 15\n| 18\n|-\n| 8\n| 12\n| 16\n| 20\n| 24\n|-\n| 10\n| 15\n| 20\n| 25\n| 30\n|-\n| 12\n| 18\n| 24\n| 30\n| 36\n|}\n* Build a vector the same length as <code>R</code> with <code>1</code> in each place where the corresponding number in <code>R</code> is in the outer product matrix (<code>\u2208</code>, ''set inclusion'' or ''element of'' or ''[[Epsilon]]'' operator), i.e., <code>0 0 1 0 1</code>\n* Logically negate (''not'') values in the vector (change zeros to ones and ones to zeros) (<code>\u223c</code>, logical ''not'' or ''[[Tilde]]'' operator), i.e., <code>1 1 0 1 0</code>\n* Select the items in <code>R</code> for which the corresponding element is <code>1</code> (<code>/</code> ''reduction'' operator), i.e., <code>2 3 5</code>\n(Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that <code>\u03b96</code> is <code>0 1 2 3 4 5</code>, which is convenient for some calculations.)\n\n", "attributes": [{"name": "ts", "values": [{"name": "1", "value": "ar"}]}], "id": 20}, {"title": " Sorting ", "paragraphs": "The following expression [[sorting|sorts]] a word list stored in matrix X according to word length:\n\n<source lang=\"apl\">\nX[\u234bX+.\u2260' ';]\n</source>\n\n", "attributes": [], "id": 21}, {"title": " Game of Life ", "paragraphs": "The following function \"life\", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to [[Conway's Game of Life]]. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL.\n\n<source lang=\"apl\">\nlife\u2190{\u21911 \u2375\u2228.\u22273 4=+/,\u00af1 0 1\u2218.\u2296\u00af1 0 1\u2218.\u233d\u2282\u2375}\n</source>\n\n", "attributes": [], "id": 22}, {"title": " HTML tags removal ", "paragraphs": "In the following example, also Dyalog, the first line assigns some HTML code to a variable <code>txt</code> and then uses an APL expression to remove all the HTML tags ([http://aplwiki.com/AplIn20Minutes#Extract_content_from_Code explanation]):\n\n<source lang=\"apl\">\n      txt\u2190'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'\n      {\u2375 /\u2368 ~{\u2375\u2228\u2260\\\u2375}\u2375\u220a'<>'} txt\nThis is emphasized text.\n</source>\n\n", "attributes": [], "id": 23}, {"title": " Use ", "paragraphs": "APL is used for many purposes including [[financial software|financial]] and [[insurance]] applications,<ref name=\"simcorp\"/> [[artificial intelligence]],<ref>{{cite journal|last1=Lee|first1=Georges|last2=Lelouche|first2=Ruddy|last3=Meissonnier|first3=Vincent|last4=Zarri|first4=Gian Piero|title=Using APL in an Artificial Intelligence environment|journal=ACM SIGAPL APL Quote Quad|date=September 1, 1982|volume=13|issue=1|pages=183\u2013191|doi=10.1145/390006.802242|url=https://www.researchgate.net/publication/234789115|access-date=April 3, 2018}}</ref><ref>{{cite journal|last1=Fordyce|first1=K.|last2=Sullivan|first2=G.|title=Artificial Intelligence Development Aids|journal=APL Quote Quad|date=1985|volume=APL 85 Conf. Proc.|issue=15|doi=10.1145/255315.255347|pages=106\u2013113}}</ref>\n[[neural networks]]<ref>{{cite journal|last=Alfonseca|first=Manuel|title=Neural networks in APL|journal=ACM SIGAPL APL Quote Quad|date=July 1990|volume=20|issue=4|pages=2\u20136|doi=10.1145/97811.97816|url=https://www.researchgate.net/publication/220731305|access-date=April 3, 2018}}</ref>\nand [[robotics]].<ref>{{cite web|last1=Kromberg|first1=Morten|title=Robot Programming in APL|url=http://begriffs.com/posts/2014-11-26-robots-in-apl.html|website=www.dyalog.com/|access-date=January 6, 2015}}</ref> It has been argued that APL is a [[calculation]] tool and not a programming language;<ref>{{cite journal|last=Holmes| first= W N|date= May 1978| title=Is APL a Programming Language?|journal=[[The Computer Journal]]| volume=21|issue=2|pages=128\u2013131|doi=10.1093/comjnl/21.2.128}}</ref> its symbolic nature and array capabilities have made it popular with [[domain expert]]s and [[data scientist]]s<ref name=\"Hsu\">{{cite web|url=https://confengine.com/functional-conf-2017/proposal/4620/design-patterns-vs-anti-pattern-in-apl|title=Design Patterns vs. Anti-pattern in APL|last=Hsu|first=Aaron|date=November 18, 2017|website=functionalconf.com|access-date=2018-04-07}}</ref> who do not have or require the skills of a [[computer programmer]].\n\nAPL is well suited to [[image manipulation]] and [[computer animation]], where graphic transformations can be encoded as matrix multiplications. One of the first commercial computer graphics houses, [[Digital Effects (studio)|Digital Effects]], produced an APL graphics product named ''Visions'', which was used to create television commercials and animation for the 1982 film ''[[Tron]]''.<ref>{{cite book|last1=Magnenat-Thalmann|first1=Nadia|last2=Thalmann|first2=Daniel|date=1985|title=Computer Animation Theory and Practice|url=https://books.google.co.uk/books?id=neGoCAAAQBAJ&pg=PA38|publisher=[[Springer-Verlag]]|page=38|isbn=9784431684336|quote=[[Digital Effects]] is another production house that worked on Tron. They used a laser-scanning system to digitize, store and reproduce images. Judson Rosebush, president of Digital Effects, is the primary designer of APL VISION and FORTRAN VISION, two computer animation packages that are currently used.|access-date=April 3, 2018}}</ref> Latterly, the [https://stormwind.fi/en/ Stormwind] [[Simulation video game|boating simulator]] uses APL to implement its core logic, its interfacing to the rendering pipeline middleware and a major part of its [[physics engine]].<ref>{{cite web|url=https://www.optima-systems.co.uk/stormwind-simulator-dyalog-16|title=Stormwind Simulator at Dyalog '16|last=Gutsell|first=Sam|date=October 17, 2017|website=www.optima-systems.co.uk|publisher=Optima Systems|access-date=April 3, 2018|quote=Stormwind is a [3D boating simulator] that has gained a huge amount of interest in the APL community.}}</ref>\n\nToday, APL remains in use in a wide range of commercial and scientific applications, for example\n[[investment management]],<ref name=\"simcorp\">{{cite web|url=https://www.simcorp.com/-/media/files/investor/annual-reports/simcorp-annual-report-2017.pdf|title=2017 Annual Report|date=February 1, 2018|publisher=SimCorp|access-date=April 3, 2018|quote=Sofia is a front-to-back investment management platform like SimCorp Dimension. ... Sofia is based on the APL coding language just like some parts of SimCorp Dimension.}}</ref>\n[[asset management]],<ref>{{cite web|url=https://www.tieto.com/sites/default/files/migrated/documents/Case_OP-Pohjola_fi2806.pdf|title=OP-Pohjola ja Tieto hoitivat sovelluksen muutosty\u00f6t sujuvalla yhteisty\u00f6ll\u00e4|website=www.tieto.com|publisher=[[Tieto]]|access-date=April 3, 2018|language=Finnish|trans-title=Smooth cooperation between [[OP Financial Group|OP-Pohjola]] and Tieto enabled app modification|quote=}}{{Dead link|date=August 2019 |bot=InternetArchiveBot |fix-attempted=yes }}</ref>\n[[health care]],<ref>{{cite web|url=http://profdoccare.se/var-ide/om-oss/vi-idag/|title=Vi idag|website=profdoccare.se|access-date=April 3, 2018|language=Swedish|trans-title=We today|quote=Through the choice of APL as a technical platform, it is relatively easy to quickly build a solution that can be called a executable prototype (translated from the original)}}</ref>\nand [[DNA profiling]],<ref>{{cite web|last1=Brenner|first1=Charles|title=DNA Identification Technology and APL|url=http://dna-view.com/DNAtechID.htm|website=dna-view.com|publisher=Presentation at the 2005 APL User Conference|access-date=January 9, 2015}}</ref><ref>{{cite web|last1=Brenner|first1=Charles|title=There's DNA Everywhere \u2013 an Opportunity for APL|url=https://www.youtube.com/watch?v=oXlP3r6PzeE|website=www.youtube.com|publisher=YouTube|access-date=January 9, 2015}}</ref> \nand by hobbyists.<ref>{{cite web|url=https://codegolf.stackexchange.com/questions/17665/tips-for-golfing-in-apl|title=Tips for golfing in APL|website=stackexchange.com|access-date=April 3, 2018}}</ref>\n\n", "attributes": [{"name": "cite journal", "values": [{"name": "last1", "value": "Lee"}, {"name": "first1", "value": "Georges"}, {"name": "last2", "value": "Lelouche"}, {"name": "first2", "value": "Ruddy"}, {"name": "last3", "value": "Meissonnier"}, {"name": "first3", "value": "Vincent"}, {"name": "last4", "value": "Zarri"}, {"name": "first4", "value": "Gian Piero"}, {"name": "title", "value": "Using APL in an Artificial Intelligence environment"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "September 1, 1982"}, {"name": "volume", "value": "13"}, {"name": "issue", "value": "1"}, {"name": "pages", "value": "183\u2013191"}, {"name": "doi", "value": "10.1145/390006.802242"}, {"name": "url", "value": "https://www.researchgate.net/publication/234789115"}, {"name": "access-date", "value": "April 3, 2018"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Fordyce"}, {"name": "first1", "value": "K."}, {"name": "last2", "value": "Sullivan"}, {"name": "first2", "value": "G."}, {"name": "title", "value": "Artificial Intelligence Development Aids"}, {"name": "journal", "value": "APL Quote Quad"}, {"name": "date", "value": "1985"}, {"name": "volume", "value": "APL 85 Conf. Proc."}, {"name": "issue", "value": "15"}, {"name": "doi", "value": "10.1145/255315.255347"}, {"name": "pages", "value": "106\u2013113"}]}, {"name": "cite journal", "values": [{"name": "last", "value": "Alfonseca"}, {"name": "first", "value": "Manuel"}, {"name": "title", "value": "Neural networks in APL"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "July 1990"}, {"name": "volume", "value": "20"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "2\u20136"}, {"name": "doi", "value": "10.1145/97811.97816"}, {"name": "url", "value": "https://www.researchgate.net/publication/220731305"}, {"name": "access-date", "value": "April 3, 2018"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Kromberg"}, {"name": "first1", "value": "Morten"}, {"name": "title", "value": "Robot Programming in APL"}, {"name": "url", "value": "http://begriffs.com/posts/2014-11-26-robots-in-apl.html"}, {"name": "website", "value": "www.dyalog.com/"}, {"name": "access-date", "value": "January 6, 2015"}]}, {"name": "cite journal", "values": [{"name": "last", "value": "Holmes"}, {"name": "first", "value": "W N"}, {"name": "date", "value": "May 1978"}, {"name": "title", "value": "Is APL a Programming Language?"}, {"name": "journal", "value": "[[The Computer Journal]]"}, {"name": "volume", "value": "21"}, {"name": "issue", "value": "2"}, {"name": "pages", "value": "128\u2013131"}, {"name": "doi", "value": "10.1093/comjnl/21.2.128"}]}, {"name": "cite web", "values": [{"name": "url", "value": "https://confengine.com/functional-conf-2017/proposal/4620/design-patterns-vs-anti-pattern-in-apl"}, {"name": "title", "value": "Design Patterns vs. Anti-pattern in APL"}, {"name": "last", "value": "Hsu"}, {"name": "first", "value": "Aaron"}, {"name": "date", "value": "November 18, 2017"}, {"name": "website", "value": "functionalconf.com"}, {"name": "access-date", "value": "2018-04-07"}]}, {"name": "cite book", "values": [{"name": "last1", "value": "Magnenat-Thalmann"}, {"name": "first1", "value": "Nadia"}, {"name": "last2", "value": "Thalmann"}, {"name": "first2", "value": "Daniel"}, {"name": "date", "value": "1985"}, {"name": "title", "value": "Computer Animation Theory and Practice"}, {"name": "url", "value": "https://books.google.co.uk/books?id=neGoCAAAQBAJ&pg=PA38"}, {"name": "publisher", "value": "[[Springer-Verlag]]"}, {"name": "page", "value": "38"}, {"name": "isbn", "value": "9784431684336"}, {"name": "quote", "value": "[[Digital Effects]] is another production house that worked on Tron. They used a laser-scanning system to digitize, store and reproduce images. Judson Rosebush, president of Digital Effects, is the primary designer of APL VISION and FORTRAN VISION, two computer animation packages that are currently used."}, {"name": "access-date", "value": "April 3, 2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "https://www.optima-systems.co.uk/stormwind-simulator-dyalog-16"}, {"name": "title", "value": "Stormwind Simulator at Dyalog '16"}, {"name": "last", "value": "Gutsell"}, {"name": "first", "value": "Sam"}, {"name": "date", "value": "October 17, 2017"}, {"name": "website", "value": "www.optima-systems.co.uk"}, {"name": "publisher", "value": "Optima Systems"}, {"name": "access-date", "value": "April 3, 2018"}, {"name": "quote", "value": "Stormwind is a [3D boating simulator] that has gained a huge amount of interest in the APL community."}]}, {"name": "cite web", "values": [{"name": "url", "value": "https://www.simcorp.com/-/media/files/investor/annual-reports/simcorp-annual-report-2017.pdf"}, {"name": "title", "value": "2017 Annual Report"}, {"name": "date", "value": "February 1, 2018"}, {"name": "publisher", "value": "SimCorp"}, {"name": "access-date", "value": "April 3, 2018"}, {"name": "quote", "value": "Sofia is a front-to-back investment management platform like SimCorp Dimension. ... Sofia is based on the APL coding language just like some parts of SimCorp Dimension."}]}, {"name": "cite web", "values": [{"name": "url", "value": "https://www.tieto.com/sites/default/files/migrated/documents/Case_OP-Pohjola_fi2806.pdf"}, {"name": "title", "value": "OP-Pohjola ja Tieto hoitivat sovelluksen muutosty\u00f6t sujuvalla yhteisty\u00f6ll\u00e4"}, {"name": "website", "value": "www.tieto.com"}, {"name": "publisher", "value": "[[Tieto]]"}, {"name": "access-date", "value": "April 3, 2018"}, {"name": "language", "value": "Finnish"}, {"name": "trans-title", "value": "Smooth cooperation between [[OP Financial Group|OP-Pohjola]] and Tieto enabled app modification"}]}, {"name": "Dead link", "values": [{"name": "date", "value": "August 2019"}, {"name": "bot", "value": "InternetArchiveBot"}, {"name": "fix-attempted", "value": "yes"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://profdoccare.se/var-ide/om-oss/vi-idag/"}, {"name": "title", "value": "Vi idag"}, {"name": "website", "value": "profdoccare.se"}, {"name": "access-date", "value": "April 3, 2018"}, {"name": "language", "value": "Swedish"}, {"name": "trans-title", "value": "We today"}, {"name": "quote", "value": "Through the choice of APL as a technical platform, it is relatively easy to quickly build a solution that can be called a executable prototype (translated from the original)"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Brenner"}, {"name": "first1", "value": "Charles"}, {"name": "title", "value": "DNA Identification Technology and APL"}, {"name": "url", "value": "http://dna-view.com/DNAtechID.htm"}, {"name": "website", "value": "dna-view.com"}, {"name": "publisher", "value": "Presentation at the 2005 APL User Conference"}, {"name": "access-date", "value": "January 9, 2015"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Brenner"}, {"name": "first1", "value": "Charles"}, {"name": "title", "value": "There's DNA Everywhere \u2013 an Opportunity for APL"}, {"name": "url", "value": "https://www.youtube.com/watch?v=oXlP3r6PzeE"}, {"name": "website", "value": "www.youtube.com"}, {"name": "publisher", "value": "YouTube"}, {"name": "access-date", "value": "January 9, 2015"}]}, {"name": "cite web", "values": [{"name": "url", "value": "https://codegolf.stackexchange.com/questions/17665/tips-for-golfing-in-apl"}, {"name": "title", "value": "Tips for golfing in APL"}, {"name": "website", "value": "stackexchange.com"}, {"name": "access-date", "value": "April 3, 2018"}]}], "id": 24}, {"title": "Notable implementations", "paragraphs": "===APL\\360===\nThe first implementation of APL using recognizable APL symbols was APL\\360 which ran on the [[IBM System/360]], and was completed in November 1966<ref name=\"Birthdate\">{{cite web|url=http://www.jsoftware.com/papers/APLQA.htm#APL_birthday|title=APL Quotations and Anecdotes|website=jsoftware.com|publisher=[[J (programming language)|jsoftware]]|access-date=April 14, 2018}}</ref> though at that time remained in use only within IBM.<ref name=\"FalkoffIBMFamily\"/> In 1973 its implementors, [[Lawrence M. Breed|Larry Breed]], [[Richard H. Lathwell|Dick Lathwell]] and [[Roger Moore (computer scientist)|Roger Moore]], were awarded the [[Grace Murray Hopper Award]] from the [[Association for Computing Machinery]] (ACM). It was given \"for their work in the design and implementation of APL\\360, setting new standards in simplicity, efficiency, reliability and response time for interactive systems.\"<ref>{{cite web |title=Awards \u2013 1973 \u2013 Lawrence Breed |publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212031/http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref><ref>{{cite web |title=Awards \u2013 1973 \u2013 Richard Lathwell|publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212035/http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref><ref>{{cite web |title=Awards \u2013 1973 \u2013 Roger Moore|publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212037/http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref>\n\nIn 1975, the [[IBM 5100]] microcomputer offered APL\\360<ref>{{cite web|url=http://www.old-computers.com/museum/computer.asp?c=795|title=IBM 5100|website=old-computers.com|access-date=April 8, 2018|archive-url=https://web.archive.org/web/20180430050157/http://www.old-computers.com/museum/computer.asp?c=795|archive-date=April 30, 2018|url-status=dead}}</ref> as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.<ref name=\"byte197512\">{{cite news| url=https://archive.org/stream/byte-magazine-1975-12/1975_12_BYTE_00-04_Assembling_an_Altair#page/n91/mode/2up | title=Welcome, IBM, to personal computing | work=BYTE | date=December 1975 | accessdate=April 29, 2018|pages=90}}</ref>\n\nSignificant developments to APL\\360 included CMS/APL, which made use of the [[Virtual memory|virtual storage]] capabilities of [[Conversational Monitor System|CMS]] and APLSV, which introduced [[shared variable]]s, system variables and system functions. It was subsequently ported to the [[IBM System/370]] and [[Virtual Storage Personal Computing|VSPC]] platforms until its final release in 1983, after which it was replaced by APL2.<ref name=\"FalkoffIBMFamily\"/>\n\n===APL\\1130===\nIn 1968, APL\\1130 became the first publicly available APL system,<ref>{{cite web|url=http://www.sigapl.org/APLChronology.php|title=Chronology of APL and its Influences on Computer Language Development|website=www.sigapl.org|publisher=ACM|access-date=April 29, 2018}}\n</ref> created by IBM for the [[IBM 1130]]. It became the most popular [[IBM Type-III Library]] software that IBM released.<ref>{{cite journal|url=http://www.vector.org.uk/archive/v223/APL_1130.htm|title=How We Got To APL\\1130|author=Larry Breed|authorlink=Lawrence M. Breed|journal=Vector (British APL Association)|volume=22|issue=3|date=August 2006|issn=0955-1433|accessdate=April 29, 2018|archive-url=https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm|archive-date=May 12, 2008|url-status=dead}}</ref>\n\n===APL*Plus and Sharp APL===\n{{Main|I. P. Sharp Associates|Scientific Time Sharing Corporation}}\n\nAPL*Plus and Sharp APL are versions of APL\\360 with added business-oriented extensions such as data formatting and facilities to store APL arrays in external files. They were jointly developed by two companies, employing various members of the original IBM APL\\360 development team.<ref>{{cite web |url=http://rogerdmoore.ca/INF/ERInstallationHistory.htm |title=History of I. P. Sharp Associates Timesharing and Network |author=Roger Moore|author-link=Roger Moore (computer scientist) |date=2005<!-- Not in article. Found on webpage of links above-before article page. --> |website=Rogerdmoore.ca |publisher=Roger Moore |access-date=March 7, 2018}}</ref>\n \nThe two companies were [[I. P. Sharp Associates]] (IPSA), an APL\\360 services company formed in 1964 by Ian Sharp, Roger Moore and others, and [[Scientific Time Sharing Corporation|STSC]], a time-sharing and consulting service company formed in 1969 by Lawrence Breed and others. Together the two developed APL*Plus and thereafter continued to work together but develop APL separately as APL*Plus and Sharp APL. STSC ported APL*Plus to many platforms with versions being made for the VAX 11,<ref>{{cite magazine|last=Blumenthal|first=Marcia|date=May 18, 1981|title=VAX-11s Acquire APL Processor|url=https://books.google.co.uk/books?id=MCFtKT_NaYIC&pg=PA2&lpg=PA2&dq=vax+apl&q=vax%20apl|magazine=Computerworld|access-date= April 22, 2018}}</ref> PC and UNIX, whereas IPSA took a different approach to the arrival of the [[Personal Computer]] and made Sharp APL available on this platform using additional [[PC-based IBM-compatible mainframes|PC-XT/360]] hardware. In 1993, [[Soliton Incorporated]] was formed to support Sharp APL and it developed Sharp APL into SAX (Sharp APL for Unix). {{as of|2018}}, APL*Plus continues as APL2000 APL+Win.\n\nIn 1985, Ian Sharp, and Dan Dyer of STSC, jointly received the [[Iverson Award|Kenneth E. Iverson Award for Outstanding Contribution to APL]].<ref name=\"IversonAwards\"/>\n\n===APL2===\nAPL2 was a significant re-implementation of APL by IBM which was developed from 1971 and first released in 1984. It provides many additions to the language, of which the most notable is nested (non-rectangular) array support.<ref name=\"FalkoffIBMFamily\"/> {{as of|2018}} it is available for mainframe computers running [[z/OS]] or [[z/VM]] and workstations running [[IBM AIX|AIX]], [[Linux]], [[Solaris (operating system)|Sun Solaris]], and [[Microsoft Windows]].<ref>{{cite web|url=http://www-01.ibm.com/support/docview.wss?uid=swg22012321|title=APL2: What's New|website=ibm.com|publisher=ibm|access-date=April 22, 2018}}</ref>\n\nThe entire APL2 Products and Services Team was awarded the Iverson Award in 2007.<ref name=\"IversonAwards\"/>\n\n===Dyalog APL===\nDyalog APL was first released by [[United Kingdom|British]] company Dyalog Ltd.<ref>{{cite web |title=Dyalog Ltd website |url=https://www.dyalog.com/ |accessdate=6 June 2018}}</ref> in 1983<ref>{{Cite journal|title = Dyalog at 25|journal = Vector Magazine|publisher = British APL Association|date = September 2008|url = http://www.vector.org.uk/archive/v234b/d25.pdf|accessdate = April 14, 2018}}{{Dead link|date=April 2019 |bot=InternetArchiveBot |fix-attempted=yes }}</ref> and, {{as of|2018|lc=y}}, is available for [[IBM AIX|AIX]], [[Linux]] (including on the [[Raspberry Pi]]), [[macOS]] and [[Microsoft Windows]] platforms. It is based on APL2, with extensions to support [[object-oriented programming]]<ref>{{cite journal|author=Kromberg, Morten|title=Arrays of Objects|journal=Proceedings of the 2007 Symposium on Dynamic Languages|date=22 October 2007|url=https://www.dyalog.com/uploads/documents/Papers/Arrays%20of%20Objects.pdf|accessdate=27 August 2018}}</ref> and [[functional programming]].<ref>{{cite web|url=http://archive.vector.org.uk/art10007770|title=D: A functional subset of Dyalog APL|last=Scholes|first=John|publisher=British APL Asscociation}}</ref> Licences are free for personal/non-commercial use.<ref>{{Cite web | url=https://www.dyalog.com/prices-and-licences.htm#personal |title = Dyalog - Prices and Licences}}</ref>\n\nIn 1995, two of the development team - [[John M. Scholes (computer scientist)|John Scholes]] and Peter Donnelly - were awarded the Iverson Award for their work on the interpreter.<ref name=\"IversonAwards\">{{cite web |title=Kenneth E. Iverson Award for Outstanding Contribution to APL|publisher=[[SIGPLAN]] Chapter on Array Programming Languages (SIGAPL)|url=http://www.sigapl.org/award.htm|url-status=dead|archive-url=https://web.archive.org/web/20120226063703/http://www.sigapl.org/award.htm|archive-date=February 26, 2012}}</ref> Gitte Christensen and Morten Kromberg were joint recipients of the Iverson Award in 2016.<ref>{{cite web |title=2016 Iverson Award Recognises Dyalog's CEO and CXO |url=http://www.dyalog.com/dyalogue-newsletters.htm?nl=27&a=158 |accessdate=6 June 2018}}</ref>\n\n===NARS2000===\nNARS2000 is an open-source APL interpreter written by Bob Smith, a prominent APL developer and implementor from [[Scientific Time Sharing Corporation|STSC]] in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes and runs natively on [[Microsoft Windows]], and other platforms under [[Wine (software)|Wine]].<ref name=\"NARS2000\">{{cite web |title=Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter |url=http://www.nars2000.org/ |website=NARS2000 |publisher=Sudley Place Software |access-date=July 10, 2015}}</ref>\n\n===APLX===\n{{main|APLX}}\n\nAPLX is a [[cross-platform]] [[Programming language dialect|dialect]] of APL, based on APL2 and with several extensions, which was first released by [[United Kingdom|British]] company MicroAPL in 2002. Although no longer in development or on commercial sale it is now available free of charge from Dyalog.<ref>{{cite web |title=APLX has been withdrawn from commercial sale but can be downloaded free of charge|url=http://microapl.com/apl/|publisher=Microapl.com|access-date=April 14, 2018}}</ref>\n\n===GNU APL===\nGNU APL is a free implementation of Extended APL as specified in ISO/IEC 13751:2001 and is thus similar to APL2. It runs on GNU/Linux and on Windows using [[Cygwin]], and uses [[Unicode]] internally. It was written by J\u00fcrgen Sauermann.<ref name=\"GNU\">{{cite web |url=http://directory.fsf.org/wiki/GNU_APL |title=GNU APL|date= |website=directory.fsf.org |publisher=[[Free Software Directory]] |access-date=September 28, 2013}}</ref>\n\n[[Richard Stallman]], founder of the [[GNU Project]], was an early adopter of APL, using it to write a text editor as a high school student in the summer of 1969.<ref name=\"Ber\u00e4ttar\">{{cite web|last=Stallman|first=Richard M|url=http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt|title=RMS Ber\u00e4ttar|accessdate=April 22, 2018|archive-url=https://web.archive.org/web/20181126072301/http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt|archive-date=November 26, 2018|url-status=dead}}</ref>\n\n", "attributes": [{"name": "cite web", "values": [{"name": "url", "value": "http://www.jsoftware.com/papers/APLQA.htm#APL_birthday"}, {"name": "title", "value": "APL Quotations and Anecdotes"}, {"name": "website", "value": "jsoftware.com"}, {"name": "publisher", "value": "[[J (programming language)|jsoftware]]"}, {"name": "access-date", "value": "April 14, 2018"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Lawrence Breed"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212031/http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Richard Lathwell"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212035/http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Roger Moore"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212037/http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.old-computers.com/museum/computer.asp?c=795"}, {"name": "title", "value": "IBM 5100"}, {"name": "website", "value": "old-computers.com"}, {"name": "access-date", "value": "April 8, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20180430050157/http://www.old-computers.com/museum/computer.asp?c=795"}, {"name": "archive-date", "value": "April 30, 2018"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite news", "values": [{"name": "url", "value": "https://archive.org/stream/byte-magazine-1975-12/1975_12_BYTE_00-04_Assembling_an_Altair#page/n91/mode/2up"}, {"name": "title", "value": "Welcome, IBM, to personal computing"}, {"name": "work", "value": "BYTE"}, {"name": "date", "value": "December 1975"}, {"name": "accessdate", "value": "April 29, 2018"}, {"name": "pages", "value": "90"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.sigapl.org/APLChronology.php"}, {"name": "title", "value": "Chronology of APL and its Influences on Computer Language Development"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite journal", "values": [{"name": "url", "value": "http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "title", "value": "How We Got To APL\\1130"}, {"name": "author", "value": "Larry Breed"}, {"name": "authorlink", "value": "Lawrence M. Breed"}, {"name": "journal", "value": "Vector (British APL Association)"}, {"name": "volume", "value": "22"}, {"name": "issue", "value": "3"}, {"name": "date", "value": "August 2006"}, {"name": "issn", "value": "0955-1433"}, {"name": "accessdate", "value": "April 29, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "archive-date", "value": "May 12, 2008"}, {"name": "url-status", "value": "dead"}]}, {"name": "Main", "values": [{"name": "1", "value": "I. P. Sharp Associates"}, {"name": "2", "value": "Scientific Time Sharing Corporation"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://rogerdmoore.ca/INF/ERInstallationHistory.htm"}, {"name": "title", "value": "History of I. P. Sharp Associates Timesharing and Network"}, {"name": "author", "value": "Roger Moore"}, {"name": "author-link", "value": "Roger Moore (computer scientist)"}, {"name": "date", "value": "2005<!-- Not in article. Found on webpage of links above-before article page. -->"}, {"name": "website", "value": "Rogerdmoore.ca"}, {"name": "publisher", "value": "Roger Moore"}, {"name": "access-date", "value": "March 7, 2018"}]}, {"name": "cite magazine", "values": [{"name": "last", "value": "Blumenthal"}, {"name": "first", "value": "Marcia"}, {"name": "date", "value": "May 18, 1981"}, {"name": "title", "value": "VAX-11s Acquire APL Processor"}, {"name": "url", "value": "https://books.google.co.uk/books?id=MCFtKT_NaYIC&pg=PA2&lpg=PA2&dq=vax+apl&q=vax%20apl"}, {"name": "magazine", "value": "Computerworld"}, {"name": "access-date", "value": "April 22, 2018"}]}, {"name": "as of", "values": [{"name": "1", "value": "2018"}]}, {"name": "as of", "values": [{"name": "1", "value": "2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www-01.ibm.com/support/docview.wss?uid=swg22012321"}, {"name": "title", "value": "APL2: What's New"}, {"name": "website", "value": "ibm.com"}, {"name": "publisher", "value": "ibm"}, {"name": "access-date", "value": "April 22, 2018"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Dyalog Ltd website"}, {"name": "url", "value": "https://www.dyalog.com/"}, {"name": "accessdate", "value": "6 June 2018"}]}, {"name": "Cite journal", "values": [{"name": "title", "value": "Dyalog at 25"}, {"name": "journal", "value": "Vector Magazine"}, {"name": "publisher", "value": "British APL Association"}, {"name": "date", "value": "September 2008"}, {"name": "url", "value": "http://www.vector.org.uk/archive/v234b/d25.pdf"}, {"name": "accessdate", "value": "April 14, 2018"}]}, {"name": "Dead link", "values": [{"name": "date", "value": "April 2019"}, {"name": "bot", "value": "InternetArchiveBot"}, {"name": "fix-attempted", "value": "yes"}]}, {"name": "as of", "values": [{"name": "1", "value": "2018"}, {"name": "lc", "value": "y"}]}, {"name": "cite journal", "values": [{"name": "author", "value": "Kromberg, Morten"}, {"name": "title", "value": "Arrays of Objects"}, {"name": "journal", "value": "Proceedings of the 2007 Symposium on Dynamic Languages"}, {"name": "date", "value": "22 October 2007"}, {"name": "url", "value": "https://www.dyalog.com/uploads/documents/Papers/Arrays%20of%20Objects.pdf"}, {"name": "accessdate", "value": "27 August 2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://archive.vector.org.uk/art10007770"}, {"name": "title", "value": "D: A functional subset of Dyalog APL"}, {"name": "last", "value": "Scholes"}, {"name": "first", "value": "John"}, {"name": "publisher", "value": "British APL Asscociation"}]}, {"name": "Cite web ", "values": [{"name": "url", "value": "https://www.dyalog.com/prices-and-licences.htm#personal"}, {"name": "title", "value": "Dyalog - Prices and Licences"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Kenneth E. Iverson Award for Outstanding Contribution to APL"}, {"name": "publisher", "value": "[[SIGPLAN]] Chapter on Array Programming Languages (SIGAPL)"}, {"name": "url", "value": "http://www.sigapl.org/award.htm"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120226063703/http://www.sigapl.org/award.htm"}, {"name": "archive-date", "value": "February 26, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "2016 Iverson Award Recognises Dyalog's CEO and CXO"}, {"name": "url", "value": "http://www.dyalog.com/dyalogue-newsletters.htm?nl=27&a=158"}, {"name": "accessdate", "value": "6 June 2018"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter"}, {"name": "url", "value": "http://www.nars2000.org/"}, {"name": "website", "value": "NARS2000"}, {"name": "publisher", "value": "Sudley Place Software"}, {"name": "access-date", "value": "July 10, 2015"}]}, {"name": "main", "values": [{"name": "1", "value": "APLX"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "APLX has been withdrawn from commercial sale but can be downloaded free of charge"}, {"name": "url", "value": "http://microapl.com/apl/"}, {"name": "publisher", "value": "Microapl.com"}, {"name": "access-date", "value": "April 14, 2018"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://directory.fsf.org/wiki/GNU_APL"}, {"name": "title", "value": "GNU APL"}, {"name": "website", "value": "directory.fsf.org"}, {"name": "publisher", "value": "[[Free Software Directory]]"}, {"name": "access-date", "value": "September 28, 2013"}]}, {"name": "cite web", "values": [{"name": "last", "value": "Stallman"}, {"name": "first", "value": "Richard M"}, {"name": "url", "value": "http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt"}, {"name": "title", "value": "RMS Ber\u00e4ttar"}, {"name": "accessdate", "value": "April 22, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20181126072301/http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt"}, {"name": "archive-date", "value": "November 26, 2018"}, {"name": "url-status", "value": "dead"}]}], "id": 25}, {"title": "APL\\360", "paragraphs": "The first implementation of APL using recognizable APL symbols was APL\\360 which ran on the [[IBM System/360]], and was completed in November 1966<ref name=\"Birthdate\">{{cite web|url=http://www.jsoftware.com/papers/APLQA.htm#APL_birthday|title=APL Quotations and Anecdotes|website=jsoftware.com|publisher=[[J (programming language)|jsoftware]]|access-date=April 14, 2018}}</ref> though at that time remained in use only within IBM.<ref name=\"FalkoffIBMFamily\"/> In 1973 its implementors, [[Lawrence M. Breed|Larry Breed]], [[Richard H. Lathwell|Dick Lathwell]] and [[Roger Moore (computer scientist)|Roger Moore]], were awarded the [[Grace Murray Hopper Award]] from the [[Association for Computing Machinery]] (ACM). It was given \"for their work in the design and implementation of APL\\360, setting new standards in simplicity, efficiency, reliability and response time for interactive systems.\"<ref>{{cite web |title=Awards \u2013 1973 \u2013 Lawrence Breed |publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212031/http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref><ref>{{cite web |title=Awards \u2013 1973 \u2013 Richard Lathwell|publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212035/http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref><ref>{{cite web |title=Awards \u2013 1973 \u2013 Roger Moore|publisher=Association for Computing Machinery |url=http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973|url-status=dead|archive-url=https://web.archive.org/web/20120402212037/http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973|archive-date=April 2, 2012}}</ref>\n\nIn 1975, the [[IBM 5100]] microcomputer offered APL\\360<ref>{{cite web|url=http://www.old-computers.com/museum/computer.asp?c=795|title=IBM 5100|website=old-computers.com|access-date=April 8, 2018|archive-url=https://web.archive.org/web/20180430050157/http://www.old-computers.com/museum/computer.asp?c=795|archive-date=April 30, 2018|url-status=dead}}</ref> as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.<ref name=\"byte197512\">{{cite news| url=https://archive.org/stream/byte-magazine-1975-12/1975_12_BYTE_00-04_Assembling_an_Altair#page/n91/mode/2up | title=Welcome, IBM, to personal computing | work=BYTE | date=December 1975 | accessdate=April 29, 2018|pages=90}}</ref>\n\nSignificant developments to APL\\360 included CMS/APL, which made use of the [[Virtual memory|virtual storage]] capabilities of [[Conversational Monitor System|CMS]] and APLSV, which introduced [[shared variable]]s, system variables and system functions. It was subsequently ported to the [[IBM System/370]] and [[Virtual Storage Personal Computing|VSPC]] platforms until its final release in 1983, after which it was replaced by APL2.<ref name=\"FalkoffIBMFamily\"/>\n\n", "attributes": [{"name": "cite web", "values": [{"name": "url", "value": "http://www.jsoftware.com/papers/APLQA.htm#APL_birthday"}, {"name": "title", "value": "APL Quotations and Anecdotes"}, {"name": "website", "value": "jsoftware.com"}, {"name": "publisher", "value": "[[J (programming language)|jsoftware]]"}, {"name": "access-date", "value": "April 14, 2018"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Lawrence Breed"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212031/http://awards.acm.org/citation.cfm?id=0694605&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Richard Lathwell"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212035/http://awards.acm.org/citation.cfm?id=3412588&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Awards \u2013 1973 \u2013 Roger Moore"}, {"name": "publisher", "value": "Association for Computing Machinery"}, {"name": "url", "value": "http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120402212037/http://awards.acm.org/citation.cfm?id=4987585&srt=all&aw=145&ao=GMHOPPER&yr=1973"}, {"name": "archive-date", "value": "April 2, 2012"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www.old-computers.com/museum/computer.asp?c=795"}, {"name": "title", "value": "IBM 5100"}, {"name": "website", "value": "old-computers.com"}, {"name": "access-date", "value": "April 8, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20180430050157/http://www.old-computers.com/museum/computer.asp?c=795"}, {"name": "archive-date", "value": "April 30, 2018"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite news", "values": [{"name": "url", "value": "https://archive.org/stream/byte-magazine-1975-12/1975_12_BYTE_00-04_Assembling_an_Altair#page/n91/mode/2up"}, {"name": "title", "value": "Welcome, IBM, to personal computing"}, {"name": "work", "value": "BYTE"}, {"name": "date", "value": "December 1975"}, {"name": "accessdate", "value": "April 29, 2018"}, {"name": "pages", "value": "90"}]}], "id": 26}, {"title": "APL\\1130", "paragraphs": "In 1968, APL\\1130 became the first publicly available APL system,<ref>{{cite web|url=http://www.sigapl.org/APLChronology.php|title=Chronology of APL and its Influences on Computer Language Development|website=www.sigapl.org|publisher=ACM|access-date=April 29, 2018}}\n</ref> created by IBM for the [[IBM 1130]]. It became the most popular [[IBM Type-III Library]] software that IBM released.<ref>{{cite journal|url=http://www.vector.org.uk/archive/v223/APL_1130.htm|title=How We Got To APL\\1130|author=Larry Breed|authorlink=Lawrence M. Breed|journal=Vector (British APL Association)|volume=22|issue=3|date=August 2006|issn=0955-1433|accessdate=April 29, 2018|archive-url=https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm|archive-date=May 12, 2008|url-status=dead}}</ref>\n\n", "attributes": [{"name": "cite web", "values": [{"name": "url", "value": "http://www.sigapl.org/APLChronology.php"}, {"name": "title", "value": "Chronology of APL and its Influences on Computer Language Development"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "April 29, 2018"}]}, {"name": "cite journal", "values": [{"name": "url", "value": "http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "title", "value": "How We Got To APL\\1130"}, {"name": "author", "value": "Larry Breed"}, {"name": "authorlink", "value": "Lawrence M. Breed"}, {"name": "journal", "value": "Vector (British APL Association)"}, {"name": "volume", "value": "22"}, {"name": "issue", "value": "3"}, {"name": "date", "value": "August 2006"}, {"name": "issn", "value": "0955-1433"}, {"name": "accessdate", "value": "April 29, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080512031437/http://www.vector.org.uk/archive/v223/APL_1130.htm"}, {"name": "archive-date", "value": "May 12, 2008"}, {"name": "url-status", "value": "dead"}]}], "id": 27}, {"title": "APL*Plus and Sharp APL", "paragraphs": "{{Main|I. P. Sharp Associates|Scientific Time Sharing Corporation}}\n\nAPL*Plus and Sharp APL are versions of APL\\360 with added business-oriented extensions such as data formatting and facilities to store APL arrays in external files. They were jointly developed by two companies, employing various members of the original IBM APL\\360 development team.<ref>{{cite web |url=http://rogerdmoore.ca/INF/ERInstallationHistory.htm |title=History of I. P. Sharp Associates Timesharing and Network |author=Roger Moore|author-link=Roger Moore (computer scientist) |date=2005<!-- Not in article. Found on webpage of links above-before article page. --> |website=Rogerdmoore.ca |publisher=Roger Moore |access-date=March 7, 2018}}</ref>\n \nThe two companies were [[I. P. Sharp Associates]] (IPSA), an APL\\360 services company formed in 1964 by Ian Sharp, Roger Moore and others, and [[Scientific Time Sharing Corporation|STSC]], a time-sharing and consulting service company formed in 1969 by Lawrence Breed and others. Together the two developed APL*Plus and thereafter continued to work together but develop APL separately as APL*Plus and Sharp APL. STSC ported APL*Plus to many platforms with versions being made for the VAX 11,<ref>{{cite magazine|last=Blumenthal|first=Marcia|date=May 18, 1981|title=VAX-11s Acquire APL Processor|url=https://books.google.co.uk/books?id=MCFtKT_NaYIC&pg=PA2&lpg=PA2&dq=vax+apl&q=vax%20apl|magazine=Computerworld|access-date= April 22, 2018}}</ref> PC and UNIX, whereas IPSA took a different approach to the arrival of the [[Personal Computer]] and made Sharp APL available on this platform using additional [[PC-based IBM-compatible mainframes|PC-XT/360]] hardware. In 1993, [[Soliton Incorporated]] was formed to support Sharp APL and it developed Sharp APL into SAX (Sharp APL for Unix). {{as of|2018}}, APL*Plus continues as APL2000 APL+Win.\n\nIn 1985, Ian Sharp, and Dan Dyer of STSC, jointly received the [[Iverson Award|Kenneth E. Iverson Award for Outstanding Contribution to APL]].<ref name=\"IversonAwards\"/>\n\n", "attributes": [{"name": "Main", "values": [{"name": "1", "value": "I. P. Sharp Associates"}, {"name": "2", "value": "Scientific Time Sharing Corporation"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://rogerdmoore.ca/INF/ERInstallationHistory.htm"}, {"name": "title", "value": "History of I. P. Sharp Associates Timesharing and Network"}, {"name": "author", "value": "Roger Moore"}, {"name": "author-link", "value": "Roger Moore (computer scientist)"}, {"name": "date", "value": "2005<!-- Not in article. Found on webpage of links above-before article page. -->"}, {"name": "website", "value": "Rogerdmoore.ca"}, {"name": "publisher", "value": "Roger Moore"}, {"name": "access-date", "value": "March 7, 2018"}]}, {"name": "cite magazine", "values": [{"name": "last", "value": "Blumenthal"}, {"name": "first", "value": "Marcia"}, {"name": "date", "value": "May 18, 1981"}, {"name": "title", "value": "VAX-11s Acquire APL Processor"}, {"name": "url", "value": "https://books.google.co.uk/books?id=MCFtKT_NaYIC&pg=PA2&lpg=PA2&dq=vax+apl&q=vax%20apl"}, {"name": "magazine", "value": "Computerworld"}, {"name": "access-date", "value": "April 22, 2018"}]}, {"name": "as of", "values": [{"name": "1", "value": "2018"}]}], "id": 28}, {"title": "APL2", "paragraphs": "APL2 was a significant re-implementation of APL by IBM which was developed from 1971 and first released in 1984. It provides many additions to the language, of which the most notable is nested (non-rectangular) array support.<ref name=\"FalkoffIBMFamily\"/> {{as of|2018}} it is available for mainframe computers running [[z/OS]] or [[z/VM]] and workstations running [[IBM AIX|AIX]], [[Linux]], [[Solaris (operating system)|Sun Solaris]], and [[Microsoft Windows]].<ref>{{cite web|url=http://www-01.ibm.com/support/docview.wss?uid=swg22012321|title=APL2: What's New|website=ibm.com|publisher=ibm|access-date=April 22, 2018}}</ref>\n\nThe entire APL2 Products and Services Team was awarded the Iverson Award in 2007.<ref name=\"IversonAwards\"/>\n\n", "attributes": [{"name": "as of", "values": [{"name": "1", "value": "2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://www-01.ibm.com/support/docview.wss?uid=swg22012321"}, {"name": "title", "value": "APL2: What's New"}, {"name": "website", "value": "ibm.com"}, {"name": "publisher", "value": "ibm"}, {"name": "access-date", "value": "April 22, 2018"}]}], "id": 29}, {"title": "Dyalog APL", "paragraphs": "Dyalog APL was first released by [[United Kingdom|British]] company Dyalog Ltd.<ref>{{cite web |title=Dyalog Ltd website |url=https://www.dyalog.com/ |accessdate=6 June 2018}}</ref> in 1983<ref>{{Cite journal|title = Dyalog at 25|journal = Vector Magazine|publisher = British APL Association|date = September 2008|url = http://www.vector.org.uk/archive/v234b/d25.pdf|accessdate = April 14, 2018}}{{Dead link|date=April 2019 |bot=InternetArchiveBot |fix-attempted=yes }}</ref> and, {{as of|2018|lc=y}}, is available for [[IBM AIX|AIX]], [[Linux]] (including on the [[Raspberry Pi]]), [[macOS]] and [[Microsoft Windows]] platforms. It is based on APL2, with extensions to support [[object-oriented programming]]<ref>{{cite journal|author=Kromberg, Morten|title=Arrays of Objects|journal=Proceedings of the 2007 Symposium on Dynamic Languages|date=22 October 2007|url=https://www.dyalog.com/uploads/documents/Papers/Arrays%20of%20Objects.pdf|accessdate=27 August 2018}}</ref> and [[functional programming]].<ref>{{cite web|url=http://archive.vector.org.uk/art10007770|title=D: A functional subset of Dyalog APL|last=Scholes|first=John|publisher=British APL Asscociation}}</ref> Licences are free for personal/non-commercial use.<ref>{{Cite web | url=https://www.dyalog.com/prices-and-licences.htm#personal |title = Dyalog - Prices and Licences}}</ref>\n\nIn 1995, two of the development team - [[John M. Scholes (computer scientist)|John Scholes]] and Peter Donnelly - were awarded the Iverson Award for their work on the interpreter.<ref name=\"IversonAwards\">{{cite web |title=Kenneth E. Iverson Award for Outstanding Contribution to APL|publisher=[[SIGPLAN]] Chapter on Array Programming Languages (SIGAPL)|url=http://www.sigapl.org/award.htm|url-status=dead|archive-url=https://web.archive.org/web/20120226063703/http://www.sigapl.org/award.htm|archive-date=February 26, 2012}}</ref> Gitte Christensen and Morten Kromberg were joint recipients of the Iverson Award in 2016.<ref>{{cite web |title=2016 Iverson Award Recognises Dyalog's CEO and CXO |url=http://www.dyalog.com/dyalogue-newsletters.htm?nl=27&a=158 |accessdate=6 June 2018}}</ref>\n\n", "attributes": [{"name": "cite web ", "values": [{"name": "title", "value": "Dyalog Ltd website"}, {"name": "url", "value": "https://www.dyalog.com/"}, {"name": "accessdate", "value": "6 June 2018"}]}, {"name": "Cite journal", "values": [{"name": "title", "value": "Dyalog at 25"}, {"name": "journal", "value": "Vector Magazine"}, {"name": "publisher", "value": "British APL Association"}, {"name": "date", "value": "September 2008"}, {"name": "url", "value": "http://www.vector.org.uk/archive/v234b/d25.pdf"}, {"name": "accessdate", "value": "April 14, 2018"}]}, {"name": "Dead link", "values": [{"name": "date", "value": "April 2019"}, {"name": "bot", "value": "InternetArchiveBot"}, {"name": "fix-attempted", "value": "yes"}]}, {"name": "as of", "values": [{"name": "1", "value": "2018"}, {"name": "lc", "value": "y"}]}, {"name": "cite journal", "values": [{"name": "author", "value": "Kromberg, Morten"}, {"name": "title", "value": "Arrays of Objects"}, {"name": "journal", "value": "Proceedings of the 2007 Symposium on Dynamic Languages"}, {"name": "date", "value": "22 October 2007"}, {"name": "url", "value": "https://www.dyalog.com/uploads/documents/Papers/Arrays%20of%20Objects.pdf"}, {"name": "accessdate", "value": "27 August 2018"}]}, {"name": "cite web", "values": [{"name": "url", "value": "http://archive.vector.org.uk/art10007770"}, {"name": "title", "value": "D: A functional subset of Dyalog APL"}, {"name": "last", "value": "Scholes"}, {"name": "first", "value": "John"}, {"name": "publisher", "value": "British APL Asscociation"}]}, {"name": "Cite web ", "values": [{"name": "url", "value": "https://www.dyalog.com/prices-and-licences.htm#personal"}, {"name": "title", "value": "Dyalog - Prices and Licences"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "Kenneth E. Iverson Award for Outstanding Contribution to APL"}, {"name": "publisher", "value": "[[SIGPLAN]] Chapter on Array Programming Languages (SIGAPL)"}, {"name": "url", "value": "http://www.sigapl.org/award.htm"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20120226063703/http://www.sigapl.org/award.htm"}, {"name": "archive-date", "value": "February 26, 2012"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "2016 Iverson Award Recognises Dyalog's CEO and CXO"}, {"name": "url", "value": "http://www.dyalog.com/dyalogue-newsletters.htm?nl=27&a=158"}, {"name": "accessdate", "value": "6 June 2018"}]}], "id": 30}, {"title": "NARS2000", "paragraphs": "NARS2000 is an open-source APL interpreter written by Bob Smith, a prominent APL developer and implementor from [[Scientific Time Sharing Corporation|STSC]] in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes and runs natively on [[Microsoft Windows]], and other platforms under [[Wine (software)|Wine]].<ref name=\"NARS2000\">{{cite web |title=Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter |url=http://www.nars2000.org/ |website=NARS2000 |publisher=Sudley Place Software |access-date=July 10, 2015}}</ref>\n\n", "attributes": [{"name": "cite web ", "values": [{"name": "title", "value": "Nested Arrays Research System \u2013 NARS2000: An Experimental APL Interpreter"}, {"name": "url", "value": "http://www.nars2000.org/"}, {"name": "website", "value": "NARS2000"}, {"name": "publisher", "value": "Sudley Place Software"}, {"name": "access-date", "value": "July 10, 2015"}]}], "id": 31}, {"title": "APLX", "paragraphs": "{{main|APLX}}\n\nAPLX is a [[cross-platform]] [[Programming language dialect|dialect]] of APL, based on APL2 and with several extensions, which was first released by [[United Kingdom|British]] company MicroAPL in 2002. Although no longer in development or on commercial sale it is now available free of charge from Dyalog.<ref>{{cite web |title=APLX has been withdrawn from commercial sale but can be downloaded free of charge|url=http://microapl.com/apl/|publisher=Microapl.com|access-date=April 14, 2018}}</ref>\n\n", "attributes": [{"name": "main", "values": [{"name": "1", "value": "APLX"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "APLX has been withdrawn from commercial sale but can be downloaded free of charge"}, {"name": "url", "value": "http://microapl.com/apl/"}, {"name": "publisher", "value": "Microapl.com"}, {"name": "access-date", "value": "April 14, 2018"}]}], "id": 32}, {"title": "GNU APL", "paragraphs": "GNU APL is a free implementation of Extended APL as specified in ISO/IEC 13751:2001 and is thus similar to APL2. It runs on GNU/Linux and on Windows using [[Cygwin]], and uses [[Unicode]] internally. It was written by J\u00fcrgen Sauermann.<ref name=\"GNU\">{{cite web |url=http://directory.fsf.org/wiki/GNU_APL |title=GNU APL|date= |website=directory.fsf.org |publisher=[[Free Software Directory]] |access-date=September 28, 2013}}</ref>\n\n[[Richard Stallman]], founder of the [[GNU Project]], was an early adopter of APL, using it to write a text editor as a high school student in the summer of 1969.<ref name=\"Ber\u00e4ttar\">{{cite web|last=Stallman|first=Richard M|url=http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt|title=RMS Ber\u00e4ttar|accessdate=April 22, 2018|archive-url=https://web.archive.org/web/20181126072301/http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt|archive-date=November 26, 2018|url-status=dead}}</ref>\n\n", "attributes": [{"name": "cite web ", "values": [{"name": "url", "value": "http://directory.fsf.org/wiki/GNU_APL"}, {"name": "title", "value": "GNU APL"}, {"name": "website", "value": "directory.fsf.org"}, {"name": "publisher", "value": "[[Free Software Directory]]"}, {"name": "access-date", "value": "September 28, 2013"}]}, {"name": "cite web", "values": [{"name": "last", "value": "Stallman"}, {"name": "first", "value": "Richard M"}, {"name": "url", "value": "http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt"}, {"name": "title", "value": "RMS Ber\u00e4ttar"}, {"name": "accessdate", "value": "April 22, 2018"}, {"name": "archive-url", "value": "https://web.archive.org/web/20181126072301/http://www.lysator.liu.se/history/garb/txt/87-2-rms.txt"}, {"name": "archive-date", "value": "November 26, 2018"}, {"name": "url-status", "value": "dead"}]}], "id": 33}, {"title": " Interpretation and compilation of APL ", "paragraphs": "APL is traditionally an [[interpreted language]], having language characteristics such as [[Strong and weak typing|weak variable typing]] not well suited to [[compiler|compilation]].<ref>{{cite book |last=Budd |first=Timothy |title=An APL Compiler |publisher=Springer-Verlag |year=1988 |isbn=978-0-387-96643-4 | url=https://books.google.co.uk/books?id=rTb2BwAAQBAJ&pg=PA1}}</ref> However, with arrays as its core data structure<ref>{{cite web|last1=SIGAPL|title=What is APL?|url=http://www.sigapl.org/about.php|website=www.sigapl.org|publisher=SIGAPL|access-date=January 20, 2015}}</ref> it provides opportunities for performance gains through [[Data parallelism|parallelism]],<ref>{{cite journal|last1=Ju|first1=Dz-Ching|last2=Ching|first2=Wai-Mee|title=Exploitation of APL data parallelism on a shared-memory MIMD machine|journal=Newsletter ACM SIGPLAN Notices|date=1991|volume=26|issue=7|pages=61\u201372|doi=10.1145/109625.109633}}</ref> [[parallel computing]],<ref>{{cite web|last1=Hsu|first1=Aaron W.|last2=Bowman|first2=William J.|title=Revisiting APL in the Modern Era|url=http://www.cs.princeton.edu/~dpw/obt/abstracts/obt12_submission_11.pdf|website=www.cs.princeton.edu|publisher=Indiana University / Princeton|access-date=January 20, 2015}}</ref><ref>{{cite journal|last1=Ching|first1=W.-M.|last2=Ju|first2=D.|title=Execution of automatically parallelized APL programs on RP3|journal=IBM Journal of Research & Development|date=1991|volume=35|issue=5/6|pages=767\u2013777|url=http://domino.research.ibm.com/tchjr/journalindex.nsf/c469af92ea9eceac85256bd50048567c/f892e104dfc4d0fd85256bfa0067fb42!OpenDocument|access-date=January 20, 2015|doi=10.1147/rd.355.0767}}</ref> [[Massively parallel (computing)|massively parallel]] applications,<ref>{{cite journal|last1=Blelloch|first1=Guy E.|last2=Sabot|first2=Gary W.|title=Compiling Collection-Oriented Languages onto Massively Parallel Computers|journal=Journal of Parallel and Distributed Computing|volume=8|issue=2|citeseerx=10.1.1.51.5088|pages=119\u2013134|quote=Collection oriented languages include APL, APL2|year=1990|doi=10.1016/0743-7315(90)90087-6}}</ref><ref>{{cite web|last1=Jendrsczok|first1=Johannes|last2=Hoffmann|first2=Rolf|last3=Ediger|first3=Patrick|last4=Keller|first4=J\u00f6rg|title=Implementing APL-like data parallel functions on a GCA machine|url=https://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/pv/97-08/papergca_09_1_.pdf|website=www.fernuni-hagen.de|publisher=Fernuni-Hagen.De|access-date=January 22, 2015|pages=1\u20136|quote=GCA \u2013 Global Cellular Automation.  Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures.|archive-url=https://web.archive.org/web/20150122211834/https://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/pv/97-08/papergca_09_1_.pdf|archive-date=January 22, 2015|url-status=dead}}</ref> and [[very-large-scale integration]] (VLSI),<ref>{{cite book|last1=Brenner of IBM T.J.Watson Research Center|first1=Norman|title=VLSI circuit design using APL with fortran subroutines|journal=ACM SIGAPL APL Quote Quad|date=1984|volume=14|issue=4|pages=77\u201379|doi=10.1145/800058.801079|publisher=ACM SIGAPL|quote=APL for interactiveness and ease of coding|isbn=978-0897911375}}</ref><ref>{{cite book |doi=10.1109/PACRIM.1989.48437 |quote=VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display|chapter=Towards a graphics/Procedural environment for constructing VLSI module generators|title=Conference Proceeding IEEE Pacific Rim Conference on Communications, Computers and Signal Processing|pages=606\u2013611|year=1989|last1=Gamble|first1=D.J.|last2=Hobson|first2=R.F.}}</ref> and from the outset APL has been regarded as a high-performance language<ref>{{cite journal |last=Lee |first=Robert S. |title=Two Implementations of APL |journal=PC Magazine |date=1983 |volume=2 |issue=5 |page=379 |url=https://books.google.com/?id=qURs4j9vKn4C&pg=PA379&lpg=PA379&dq=%22IBM+APL%27s+fast+execution%22&q=%22IBM%20APL%27s%20fast%20execution%22 |access-date=January 20, 2015}}</ref> - for example, it was noted for the speed with which it could perform complicated matrix operations \"because it operates on arrays and performs operations like matrix inversion internally\".<ref>{{cite web |last1=MARTHA and LLAMA |title=The APL Computer Language |url=http://marthallama.org/apl/ |website=marthallama.org |publisher=MarthaLlama |access-date=January 20, 2015}}</ref>\n\nNevertheless, APL is rarely purely interpreted and compilation or partial compilation techniques that are, or have been, used include the following:\n\n=== Idiom recognition ===\nMost APL interpreters support [[Programming idiom|idiom]] recognition<ref>{{cite book |last=Metzger |first=Robert |last2=Wen | first2=Zhaofang |title=Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization|publisher=The MIT press |year=2000 |isbn=9780262133685 | url=https://books.google.co.uk/books?id=u38h_fV3UqgC&pg=PA12 |access-date=May 6, 2018}}</ref> and evaluate common idioms as single operations.<ref>{{cite journal |last1=Snyder |first1=Lawrence |date=1982 |title=Recognition and Selection of Idioms for Code Optimization |journal=Acta Informatica |volume=17 |issue=3 |doi=10.1007/BF00264357 }}</ref><ref>{{cite journal |last1=Cheng |first1=Feng Sheng |date=1981 |title=Idiom matching: an optimization technique for an APL compiler |url=https://lib.dr.iastate.edu/cgi/viewcontent.cgi?article=7896&context=rtd |publisher=Iowa State University  |access-date=May 6, 2018 }}</ref> For example, by evaluating the idiom <code>BV/\u2373\u2374A</code> as a single operation (where <code>BV</code> is a Boolean vector and <code>A</code> is an array), the creation of two intermediate arrays is avoided.<ref>{{cite web |url=http://help.dyalog.com/16.0/Content/Language/Defined%20Functions%20and%20Operators/Idiom%20Recognition/Idiom%20Recognition.htm |title=Idiom Recognition |publisher=dyalog.com |access-date=May 6, 2018 }}</ref>\n\n=== Optimised bytecode ===\nWeak typing in APL means that a name may reference an array (of any datatype), a function or an operator. In general, the interpreter cannot know in advance which form it will be and must therefore perform analysis, syntax checking etc. at run-time.<ref>{{cite journal|last=Strawn|first=George O.|date=March 1977|title=Does APL really need run\u2010time parsing?|journal=Journal of Software: Practice and Experience|volume=7|issue=2|pages=193\u2013200|doi=10.1002/spe.4380070207}}</ref> However, in certain circumstances, it is possible to deduce in advance what type a name is expected to reference and then generate [[bytecode]] which can be executed with reduced run-time overhead. This bytecode can also be optimised using compilation techniques such as [[constant folding]] or [[common subexpression elimination]].<ref name=\"DyalogCompiler\">{{cite web|title=Compiler User Guide|url=http://docs.dyalog.com/16.0/Compiler%20User%20Guide.pdf|website=www.dyalog.com|publisher=Dyalog Ltd.|access-date=May 7, 2018}}</ref> The interpreter will execute the bytecode when present and when any assumptions which have been made are met. Dyalog APL includes support for optimised bytecode.<ref name=\"DyalogCompiler\"/>\n\n=== Compilation ===\n[[Compiler|Compilation]] of APL has been the subject of research and experiment since the language first became available; the first compiler is considered to be the Burroughs APL-700<ref name=\"DriscollOrth\">\n{{cite journal |last1=Driscoll Jr. |first1=Graham C. |last2=Orth |first2=Donald L. |date=November 1986 |title=Compiling APL: The Yorktown APL Translator |url=https://pdfs.semanticscholar.org/ea16/33960885633c2bb5bb9b522a153066a27836.pdf |journal=IBM Journal of Research and Development |volume=30 |issue=6 |pages=583\u2013593 |access-date=May 7, 2018 |doi=10.1147/rd.306.0583 }}</ref> which was released around 1971.<ref>{{cite web |url=http://www.sigapl.org/APLChronology.php |title=Chronology of APL |website=www.sigapl.org| publisher=ACM |access-date=May 7, 2018}}</ref> In order to be able to compile APL, language limitations have to be imposed.<ref name=\"DriscollOrth\"/><ref>\n{{cite journal |last1=Wai-Mee |first1=Ching |date=November 1986 |title=Program Analysis and Code Generation in an APL/370 Compiler|url=https://pdfs.semanticscholar.org/d41e/d7c9a86d649716075e1bbefc1140e8840b0e.pdf |journal=IBM Journal of Research and Development |volume=30 |issue=6 |pages=594\u2013602 |access-date=May 7, 2018 |doi=10.1147/rd.306.0594 }}</ref> APEX is a research APL compiler which was written by [[Robert Bernecky]] and is available under the [[GNU Public License]].<ref>{{cite web |title= The APEX Project |url= http://www.snakeisland.com/apexup.htm}}</ref>\n\nThe [[STSC]] APL Compiler is a hybrid of a bytecode optimiser and a compiler - it enables compilation of functions to [[machine code]] provided that its sub-functions and globals are [[Declaration (computer programming)|declared]], but the interpreter is still used as a [[runtime library]] and to execute functions which do not meet the compilation requirements.<ref>{{cite web |title= APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup) |url= http://www.chilton.com/~jimw/aplcomp.html |date= Apr 5, 1994}}</ref>\n\n", "attributes": [{"name": "cite book ", "values": [{"name": "last", "value": "Budd"}, {"name": "first", "value": "Timothy"}, {"name": "title", "value": "An APL Compiler"}, {"name": "publisher", "value": "Springer-Verlag"}, {"name": "year", "value": "1988"}, {"name": "isbn", "value": "978-0-387-96643-4"}, {"name": "url", "value": "https://books.google.co.uk/books?id=rTb2BwAAQBAJ&pg=PA1"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "SIGAPL"}, {"name": "title", "value": "What is APL?"}, {"name": "url", "value": "http://www.sigapl.org/about.php"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "SIGAPL"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Ju"}, {"name": "first1", "value": "Dz-Ching"}, {"name": "last2", "value": "Ching"}, {"name": "first2", "value": "Wai-Mee"}, {"name": "title", "value": "Exploitation of APL data parallelism on a shared-memory MIMD machine"}, {"name": "journal", "value": "Newsletter ACM SIGPLAN Notices"}, {"name": "date", "value": "1991"}, {"name": "volume", "value": "26"}, {"name": "issue", "value": "7"}, {"name": "pages", "value": "61\u201372"}, {"name": "doi", "value": "10.1145/109625.109633"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Hsu"}, {"name": "first1", "value": "Aaron W."}, {"name": "last2", "value": "Bowman"}, {"name": "first2", "value": "William J."}, {"name": "title", "value": "Revisiting APL in the Modern Era"}, {"name": "url", "value": "http://www.cs.princeton.edu/~dpw/obt/abstracts/obt12_submission_11.pdf"}, {"name": "website", "value": "www.cs.princeton.edu"}, {"name": "publisher", "value": "Indiana University / Princeton"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Ching"}, {"name": "first1", "value": "W.-M."}, {"name": "last2", "value": "Ju"}, {"name": "first2", "value": "D."}, {"name": "title", "value": "Execution of automatically parallelized APL programs on RP3"}, {"name": "journal", "value": "IBM Journal of Research & Development"}, {"name": "date", "value": "1991"}, {"name": "volume", "value": "35"}, {"name": "issue", "value": "5/6"}, {"name": "pages", "value": "767\u2013777"}, {"name": "url", "value": "http://domino.research.ibm.com/tchjr/journalindex.nsf/c469af92ea9eceac85256bd50048567c/f892e104dfc4d0fd85256bfa0067fb42!OpenDocument"}, {"name": "access-date", "value": "January 20, 2015"}, {"name": "doi", "value": "10.1147/rd.355.0767"}]}, {"name": "cite journal", "values": [{"name": "last1", "value": "Blelloch"}, {"name": "first1", "value": "Guy E."}, {"name": "last2", "value": "Sabot"}, {"name": "first2", "value": "Gary W."}, {"name": "title", "value": "Compiling Collection-Oriented Languages onto Massively Parallel Computers"}, {"name": "journal", "value": "Journal of Parallel and Distributed Computing"}, {"name": "volume", "value": "8"}, {"name": "issue", "value": "2"}, {"name": "citeseerx", "value": "10.1.1.51.5088"}, {"name": "pages", "value": "119\u2013134"}, {"name": "quote", "value": "Collection oriented languages include APL, APL2"}, {"name": "year", "value": "1990"}, {"name": "doi", "value": "10.1016/0743-7315(90)90087-6"}]}, {"name": "cite web", "values": [{"name": "last1", "value": "Jendrsczok"}, {"name": "first1", "value": "Johannes"}, {"name": "last2", "value": "Hoffmann"}, {"name": "first2", "value": "Rolf"}, {"name": "last3", "value": "Ediger"}, {"name": "first3", "value": "Patrick"}, {"name": "last4", "value": "Keller"}, {"name": "first4", "value": "J\u00f6rg"}, {"name": "title", "value": "Implementing APL-like data parallel functions on a GCA machine"}, {"name": "url", "value": "https://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/pv/97-08/papergca_09_1_.pdf"}, {"name": "website", "value": "www.fernuni-hagen.de"}, {"name": "publisher", "value": "Fernuni-Hagen.De"}, {"name": "access-date", "value": "January 22, 2015"}, {"name": "pages", "value": "1\u20136"}, {"name": "quote", "value": "GCA \u2013 Global Cellular Automation.  Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures."}, {"name": "archive-url", "value": "https://web.archive.org/web/20150122211834/https://www.fernuni-hagen.de/imperia/md/content/fakultaetfuermathematikundinformatik/pv/97-08/papergca_09_1_.pdf"}, {"name": "archive-date", "value": "January 22, 2015"}, {"name": "url-status", "value": "dead"}]}, {"name": "cite book", "values": [{"name": "last1", "value": "Brenner of IBM T.J.Watson Research Center"}, {"name": "first1", "value": "Norman"}, {"name": "title", "value": "VLSI circuit design using APL with fortran subroutines"}, {"name": "journal", "value": "ACM SIGAPL APL Quote Quad"}, {"name": "date", "value": "1984"}, {"name": "volume", "value": "14"}, {"name": "issue", "value": "4"}, {"name": "pages", "value": "77\u201379"}, {"name": "doi", "value": "10.1145/800058.801079"}, {"name": "publisher", "value": "ACM SIGAPL"}, {"name": "quote", "value": "APL for interactiveness and ease of coding"}, {"name": "isbn", "value": "978-0897911375"}]}, {"name": "cite book ", "values": [{"name": "doi", "value": "10.1109/PACRIM.1989.48437"}, {"name": "quote", "value": "VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display"}, {"name": "chapter", "value": "Towards a graphics/Procedural environment for constructing VLSI module generators"}, {"name": "title", "value": "Conference Proceeding IEEE Pacific Rim Conference on Communications, Computers and Signal Processing"}, {"name": "pages", "value": "606\u2013611"}, {"name": "year", "value": "1989"}, {"name": "last1", "value": "Gamble"}, {"name": "first1", "value": "D.J."}, {"name": "last2", "value": "Hobson"}, {"name": "first2", "value": "R.F."}]}, {"name": "cite journal ", "values": [{"name": "last", "value": "Lee"}, {"name": "first", "value": "Robert S."}, {"name": "title", "value": "Two Implementations of APL"}, {"name": "journal", "value": "PC Magazine"}, {"name": "date", "value": "1983"}, {"name": "volume", "value": "2"}, {"name": "issue", "value": "5"}, {"name": "page", "value": "379"}, {"name": "url", "value": "https://books.google.com/?id=qURs4j9vKn4C&pg=PA379&lpg=PA379&dq=%22IBM+APL%27s+fast+execution%22&q=%22IBM%20APL%27s%20fast%20execution%22"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite web ", "values": [{"name": "last1", "value": "MARTHA and LLAMA"}, {"name": "title", "value": "The APL Computer Language"}, {"name": "url", "value": "http://marthallama.org/apl/"}, {"name": "website", "value": "marthallama.org"}, {"name": "publisher", "value": "MarthaLlama"}, {"name": "access-date", "value": "January 20, 2015"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Metzger"}, {"name": "first", "value": "Robert"}, {"name": "last2", "value": "Wen"}, {"name": "first2", "value": "Zhaofang"}, {"name": "title", "value": "Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization"}, {"name": "publisher", "value": "The MIT press"}, {"name": "year", "value": "2000"}, {"name": "isbn", "value": "9780262133685"}, {"name": "url", "value": "https://books.google.co.uk/books?id=u38h_fV3UqgC&pg=PA12"}, {"name": "access-date", "value": "May 6, 2018"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Snyder"}, {"name": "first1", "value": "Lawrence"}, {"name": "date", "value": "1982"}, {"name": "title", "value": "Recognition and Selection of Idioms for Code Optimization"}, {"name": "journal", "value": "Acta Informatica"}, {"name": "volume", "value": "17"}, {"name": "issue", "value": "3"}, {"name": "doi", "value": "10.1007/BF00264357"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Cheng"}, {"name": "first1", "value": "Feng Sheng"}, {"name": "date", "value": "1981"}, {"name": "title", "value": "Idiom matching: an optimization technique for an APL compiler"}, {"name": "url", "value": "https://lib.dr.iastate.edu/cgi/viewcontent.cgi?article=7896&context=rtd"}, {"name": "publisher", "value": "Iowa State University"}, {"name": "access-date", "value": "May 6, 2018"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://help.dyalog.com/16.0/Content/Language/Defined%20Functions%20and%20Operators/Idiom%20Recognition/Idiom%20Recognition.htm"}, {"name": "title", "value": "Idiom Recognition"}, {"name": "publisher", "value": "dyalog.com"}, {"name": "access-date", "value": "May 6, 2018"}]}, {"name": "cite journal", "values": [{"name": "last", "value": "Strawn"}, {"name": "first", "value": "George O."}, {"name": "date", "value": "March 1977"}, {"name": "title", "value": "Does APL really need run\u2010time parsing?"}, {"name": "journal", "value": "Journal of Software: Practice and Experience"}, {"name": "volume", "value": "7"}, {"name": "issue", "value": "2"}, {"name": "pages", "value": "193\u2013200"}, {"name": "doi", "value": "10.1002/spe.4380070207"}]}, {"name": "cite web", "values": [{"name": "title", "value": "Compiler User Guide"}, {"name": "url", "value": "http://docs.dyalog.com/16.0/Compiler%20User%20Guide.pdf"}, {"name": "website", "value": "www.dyalog.com"}, {"name": "publisher", "value": "Dyalog Ltd."}, {"name": "access-date", "value": "May 7, 2018"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Driscoll Jr."}, {"name": "first1", "value": "Graham C."}, {"name": "last2", "value": "Orth"}, {"name": "first2", "value": "Donald L."}, {"name": "date", "value": "November 1986"}, {"name": "title", "value": "Compiling APL: The Yorktown APL Translator"}, {"name": "url", "value": "https://pdfs.semanticscholar.org/ea16/33960885633c2bb5bb9b522a153066a27836.pdf"}, {"name": "journal", "value": "IBM Journal of Research and Development"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "6"}, {"name": "pages", "value": "583\u2013593"}, {"name": "access-date", "value": "May 7, 2018"}, {"name": "doi", "value": "10.1147/rd.306.0583"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.sigapl.org/APLChronology.php"}, {"name": "title", "value": "Chronology of APL"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "May 7, 2018"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Wai-Mee"}, {"name": "first1", "value": "Ching"}, {"name": "date", "value": "November 1986"}, {"name": "title", "value": "Program Analysis and Code Generation in an APL/370 Compiler"}, {"name": "url", "value": "https://pdfs.semanticscholar.org/d41e/d7c9a86d649716075e1bbefc1140e8840b0e.pdf"}, {"name": "journal", "value": "IBM Journal of Research and Development"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "6"}, {"name": "pages", "value": "594\u2013602"}, {"name": "access-date", "value": "May 7, 2018"}, {"name": "doi", "value": "10.1147/rd.306.0594"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "The APEX Project"}, {"name": "url", "value": "http://www.snakeisland.com/apexup.htm"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup)"}, {"name": "url", "value": "http://www.chilton.com/~jimw/aplcomp.html"}, {"name": "date", "value": "Apr 5, 1994"}]}], "id": 34}, {"title": " Idiom recognition ", "paragraphs": "Most APL interpreters support [[Programming idiom|idiom]] recognition<ref>{{cite book |last=Metzger |first=Robert |last2=Wen | first2=Zhaofang |title=Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization|publisher=The MIT press |year=2000 |isbn=9780262133685 | url=https://books.google.co.uk/books?id=u38h_fV3UqgC&pg=PA12 |access-date=May 6, 2018}}</ref> and evaluate common idioms as single operations.<ref>{{cite journal |last1=Snyder |first1=Lawrence |date=1982 |title=Recognition and Selection of Idioms for Code Optimization |journal=Acta Informatica |volume=17 |issue=3 |doi=10.1007/BF00264357 }}</ref><ref>{{cite journal |last1=Cheng |first1=Feng Sheng |date=1981 |title=Idiom matching: an optimization technique for an APL compiler |url=https://lib.dr.iastate.edu/cgi/viewcontent.cgi?article=7896&context=rtd |publisher=Iowa State University  |access-date=May 6, 2018 }}</ref> For example, by evaluating the idiom <code>BV/\u2373\u2374A</code> as a single operation (where <code>BV</code> is a Boolean vector and <code>A</code> is an array), the creation of two intermediate arrays is avoided.<ref>{{cite web |url=http://help.dyalog.com/16.0/Content/Language/Defined%20Functions%20and%20Operators/Idiom%20Recognition/Idiom%20Recognition.htm |title=Idiom Recognition |publisher=dyalog.com |access-date=May 6, 2018 }}</ref>\n\n", "attributes": [{"name": "cite book ", "values": [{"name": "last", "value": "Metzger"}, {"name": "first", "value": "Robert"}, {"name": "last2", "value": "Wen"}, {"name": "first2", "value": "Zhaofang"}, {"name": "title", "value": "Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization"}, {"name": "publisher", "value": "The MIT press"}, {"name": "year", "value": "2000"}, {"name": "isbn", "value": "9780262133685"}, {"name": "url", "value": "https://books.google.co.uk/books?id=u38h_fV3UqgC&pg=PA12"}, {"name": "access-date", "value": "May 6, 2018"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Snyder"}, {"name": "first1", "value": "Lawrence"}, {"name": "date", "value": "1982"}, {"name": "title", "value": "Recognition and Selection of Idioms for Code Optimization"}, {"name": "journal", "value": "Acta Informatica"}, {"name": "volume", "value": "17"}, {"name": "issue", "value": "3"}, {"name": "doi", "value": "10.1007/BF00264357"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Cheng"}, {"name": "first1", "value": "Feng Sheng"}, {"name": "date", "value": "1981"}, {"name": "title", "value": "Idiom matching: an optimization technique for an APL compiler"}, {"name": "url", "value": "https://lib.dr.iastate.edu/cgi/viewcontent.cgi?article=7896&context=rtd"}, {"name": "publisher", "value": "Iowa State University"}, {"name": "access-date", "value": "May 6, 2018"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://help.dyalog.com/16.0/Content/Language/Defined%20Functions%20and%20Operators/Idiom%20Recognition/Idiom%20Recognition.htm"}, {"name": "title", "value": "Idiom Recognition"}, {"name": "publisher", "value": "dyalog.com"}, {"name": "access-date", "value": "May 6, 2018"}]}], "id": 35}, {"title": " Optimised bytecode ", "paragraphs": "Weak typing in APL means that a name may reference an array (of any datatype), a function or an operator. In general, the interpreter cannot know in advance which form it will be and must therefore perform analysis, syntax checking etc. at run-time.<ref>{{cite journal|last=Strawn|first=George O.|date=March 1977|title=Does APL really need run\u2010time parsing?|journal=Journal of Software: Practice and Experience|volume=7|issue=2|pages=193\u2013200|doi=10.1002/spe.4380070207}}</ref> However, in certain circumstances, it is possible to deduce in advance what type a name is expected to reference and then generate [[bytecode]] which can be executed with reduced run-time overhead. This bytecode can also be optimised using compilation techniques such as [[constant folding]] or [[common subexpression elimination]].<ref name=\"DyalogCompiler\">{{cite web|title=Compiler User Guide|url=http://docs.dyalog.com/16.0/Compiler%20User%20Guide.pdf|website=www.dyalog.com|publisher=Dyalog Ltd.|access-date=May 7, 2018}}</ref> The interpreter will execute the bytecode when present and when any assumptions which have been made are met. Dyalog APL includes support for optimised bytecode.<ref name=\"DyalogCompiler\"/>\n\n", "attributes": [{"name": "cite journal", "values": [{"name": "last", "value": "Strawn"}, {"name": "first", "value": "George O."}, {"name": "date", "value": "March 1977"}, {"name": "title", "value": "Does APL really need run\u2010time parsing?"}, {"name": "journal", "value": "Journal of Software: Practice and Experience"}, {"name": "volume", "value": "7"}, {"name": "issue", "value": "2"}, {"name": "pages", "value": "193\u2013200"}, {"name": "doi", "value": "10.1002/spe.4380070207"}]}, {"name": "cite web", "values": [{"name": "title", "value": "Compiler User Guide"}, {"name": "url", "value": "http://docs.dyalog.com/16.0/Compiler%20User%20Guide.pdf"}, {"name": "website", "value": "www.dyalog.com"}, {"name": "publisher", "value": "Dyalog Ltd."}, {"name": "access-date", "value": "May 7, 2018"}]}], "id": 36}, {"title": " Compilation ", "paragraphs": "[[Compiler|Compilation]] of APL has been the subject of research and experiment since the language first became available; the first compiler is considered to be the Burroughs APL-700<ref name=\"DriscollOrth\">\n{{cite journal |last1=Driscoll Jr. |first1=Graham C. |last2=Orth |first2=Donald L. |date=November 1986 |title=Compiling APL: The Yorktown APL Translator |url=https://pdfs.semanticscholar.org/ea16/33960885633c2bb5bb9b522a153066a27836.pdf |journal=IBM Journal of Research and Development |volume=30 |issue=6 |pages=583\u2013593 |access-date=May 7, 2018 |doi=10.1147/rd.306.0583 }}</ref> which was released around 1971.<ref>{{cite web |url=http://www.sigapl.org/APLChronology.php |title=Chronology of APL |website=www.sigapl.org| publisher=ACM |access-date=May 7, 2018}}</ref> In order to be able to compile APL, language limitations have to be imposed.<ref name=\"DriscollOrth\"/><ref>\n{{cite journal |last1=Wai-Mee |first1=Ching |date=November 1986 |title=Program Analysis and Code Generation in an APL/370 Compiler|url=https://pdfs.semanticscholar.org/d41e/d7c9a86d649716075e1bbefc1140e8840b0e.pdf |journal=IBM Journal of Research and Development |volume=30 |issue=6 |pages=594\u2013602 |access-date=May 7, 2018 |doi=10.1147/rd.306.0594 }}</ref> APEX is a research APL compiler which was written by [[Robert Bernecky]] and is available under the [[GNU Public License]].<ref>{{cite web |title= The APEX Project |url= http://www.snakeisland.com/apexup.htm}}</ref>\n\nThe [[STSC]] APL Compiler is a hybrid of a bytecode optimiser and a compiler - it enables compilation of functions to [[machine code]] provided that its sub-functions and globals are [[Declaration (computer programming)|declared]], but the interpreter is still used as a [[runtime library]] and to execute functions which do not meet the compilation requirements.<ref>{{cite web |title= APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup) |url= http://www.chilton.com/~jimw/aplcomp.html |date= Apr 5, 1994}}</ref>\n\n", "attributes": [{"name": "cite journal ", "values": [{"name": "last1", "value": "Driscoll Jr."}, {"name": "first1", "value": "Graham C."}, {"name": "last2", "value": "Orth"}, {"name": "first2", "value": "Donald L."}, {"name": "date", "value": "November 1986"}, {"name": "title", "value": "Compiling APL: The Yorktown APL Translator"}, {"name": "url", "value": "https://pdfs.semanticscholar.org/ea16/33960885633c2bb5bb9b522a153066a27836.pdf"}, {"name": "journal", "value": "IBM Journal of Research and Development"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "6"}, {"name": "pages", "value": "583\u2013593"}, {"name": "access-date", "value": "May 7, 2018"}, {"name": "doi", "value": "10.1147/rd.306.0583"}]}, {"name": "cite web ", "values": [{"name": "url", "value": "http://www.sigapl.org/APLChronology.php"}, {"name": "title", "value": "Chronology of APL"}, {"name": "website", "value": "www.sigapl.org"}, {"name": "publisher", "value": "ACM"}, {"name": "access-date", "value": "May 7, 2018"}]}, {"name": "cite journal ", "values": [{"name": "last1", "value": "Wai-Mee"}, {"name": "first1", "value": "Ching"}, {"name": "date", "value": "November 1986"}, {"name": "title", "value": "Program Analysis and Code Generation in an APL/370 Compiler"}, {"name": "url", "value": "https://pdfs.semanticscholar.org/d41e/d7c9a86d649716075e1bbefc1140e8840b0e.pdf"}, {"name": "journal", "value": "IBM Journal of Research and Development"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "6"}, {"name": "pages", "value": "594\u2013602"}, {"name": "access-date", "value": "May 7, 2018"}, {"name": "doi", "value": "10.1147/rd.306.0594"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "The APEX Project"}, {"name": "url", "value": "http://www.snakeisland.com/apexup.htm"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup)"}, {"name": "url", "value": "http://www.chilton.com/~jimw/aplcomp.html"}, {"name": "date", "value": "Apr 5, 1994"}]}], "id": 37}, {"title": " Standards ", "paragraphs": "APL has been standardized by the [[American National Standards Institute]] (ANSI) [[working group]] X3J10 and [[International Organization for Standardization]] (ISO) and [[International Electrotechnical Commission]] (IEC), ISO/IEC Joint Technical Committee 1 Subcommittee 22 Working Group 3. The Core APL language is specified in ISO 8485:1989, and the Extended APL language is specified in ISO/IEC 13751:2001.\n\n", "attributes": [], "id": 38}, {"title": " References ", "paragraphs": "{{reflist|30em}}\n\n", "attributes": [{"name": "reflist", "values": [{"name": "1", "value": "30em"}]}], "id": 39}, {"title": " Further reading ", "paragraphs": "* [http://www-public.slac.stanford.edu/sciDoc/docMeta.aspx?slacPubNumber=slac-r-114 ''An APL Machine''] (1970 Stanford doctoral dissertation by Philip Abrams)\n* [http://sigapl.org/Articles/MichaelMontalbanoPersonalViewOfAPL.php ''A Personal History Of APL''] (1982 article by [[Michael S. Montalbano]])\n* {{cite journal |url=http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf |title=Language as an intellectual tool: From hieroglyphics to APL |year=1991 |first=Donald B. |last=McIntyre |journal=IBM Systems Journal |volume=30 |issue=4 |archive-url=https://web.archive.org/web/20060504050437/http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf |archive-date=May 4, 2006 |doi=10.1147/sj.304.0554 |pages=554\u2013581}}\n* {{cite journal |url=http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf |title=A Personal view of APL |year=1991 |first=Kenneth E. |last=Iverson |author-link=Kenneth E. Iverson |journal=IBM Systems Journal |volume=30 |issue=4 |archive-url=https://web.archive.org/web/20080227012149/http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf |archive-date=February 27, 2008 |doi=10.1147/sj.304.0582 |pages=582\u2013593}}\n* [https://web.archive.org/web/20141027152546/http://www.softwarepreservation.org/projects/apl/Books/APROGRAMMING%20LANGUAGE/view ''A Programming Language''] by [[Kenneth E. Iverson]]\n* [http://www.softwarepreservation.org/projects/apl/Papers/197201_APL%20In%20Exposition_320-3010.pdf/view ''APL in Exposition''] by [[Kenneth E. Iverson]]\n* Brooks, Frederick P.; Kenneth Iverson (1965). ''Automatic Data Processing, System/360 Edition''. {{ISBN|0-471-10605-4}}.\n* {{cite book |last=Askoolum |first=Ajay |title=System Building with APL + Win |date= August 2006 |publisher=Wiley |isbn=978-0-470-03020-2}}\n* {{cite journal |url=http://www.research.ibm.com/journal/sj/032/falkoff.pdf |title=A Formal Description of System/360 |first1=Adin D. |last1=Falkoff |first2=Kenneth E. |last2=Iverson |author-link2=Kenneth E. Iverson |first3=Edward H. |last3=Sussenguth |author-link3=Edward H. Sussenguth |journal=IBM Systems Journal |volume=3 |issue=2 |year=1964 |archive-url=https://web.archive.org/web/20080227012111/http://www.research.ibm.com/journal/sj/032/falkoff.pdf |archive-date=February 27, 2008 |doi=10.1147/sj.32.0198 |pages=198\u2013261}}\n* ''History of Programming Languages'', chapter 14{{Clarify|date=June 2010}}\n* {{cite book |last=Banon |first=Gerald Jean Francis |title=Bases da Computacao Grafica |publisher=Campus |location=Rio de Janeiro |year=1989 |page=141}}\n* {{cite book |last=LePage |first=Wilbur R. |title=Applied A.P.L. Programming |publisher=Prentice Hall |year=1978}}\n* {{cite journal |title=OOPAL: Integrating Array Programming in ObjectOriented Programming |journal=Proceeding OOPSLA '03 Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications |date=November 2003 |last=Mougin |first=Philippe |last2=Ducasse |first2=Stephane |volume=38 |issue=11 |pages=65\u201377 |doi=10.1145/949343.949312 |url-status=dead |archive-url=https://web.archive.org/web/20061114145417/http://www.fscript.org/documentation/OOPAL.pdf |archive-date=November 14, 2006 |url=http://www.fscript.org/documentation/OOPAL.pdf}}\n* {{cite book|last=Dyalog Limited |url=http://www.dyalog.dk/whatsnew/OO4APLERS.pdf |archive-url=https://web.archive.org/web/20071004214341/http://www.dyalog.dk/whatsnew/OO4APLERS.pdf |url-status=dead |archive-date=October 4, 2007 |title=An Introduction to Object Oriented Programming For APL Programmers |publisher=Dyalog Limited |date=September 2006}}\n* {{cite web |title=The APL Programming Language Source Code |author-first=Len |author-last=Shustek |date=October 10, 2012 |publisher=[[Computer History Museum]] (CHM) |url=http://www.computerhistory.org/atchm/the-apl-programming-language-source-code/#A-Taste-of-APL |access-date=September 6, 2017 |url-status=live |archive-url=https://web.archive.org/web/20170906205616/http://www.computerhistory.org/atchm/the-apl-programming-language-source-code/ |archive-date=September 6, 2017}}\n\n=== Video ===\n* [https://www.youtube.com/watch?v=8kUQWuK1L4w The Origins of APL] - a 1974 talk show style interview with the original developers of APL.\n* [https://www.youtube.com/watch?v=_DTpQ4Kk2wA APL demonstration] - a 1975 live demonstration of APL by [[Robert Spence (engineer)|Professor Bob Spence]], [[Imperial College London]].\n* [https://www.youtube.com/watch?v=a9xAKttWgP4 Conway's Game Of Life in APL] - a 2009 tutorial by John Scholes of Dyalog Ltd. which implements [[Conway's Game of Life]] in a single line of APL.\n* [https://www.youtube.com/watch?v=ra_JyBCI4Xg 50 Years of APL] - a 2009 introduction to APL by Graeme Robertson.\n\n", "attributes": [{"name": "cite journal ", "values": [{"name": "url", "value": "http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf"}, {"name": "title", "value": "Language as an intellectual tool: From hieroglyphics to APL"}, {"name": "year", "value": "1991"}, {"name": "first", "value": "Donald B."}, {"name": "last", "value": "McIntyre"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "4"}, {"name": "archive-url", "value": "https://web.archive.org/web/20060504050437/http://www.research.ibm.com/journal/sj/304/ibmsj3004N.pdf"}, {"name": "archive-date", "value": "May 4, 2006"}, {"name": "doi", "value": "10.1147/sj.304.0554"}, {"name": "pages", "value": "554\u2013581"}]}, {"name": "cite journal ", "values": [{"name": "url", "value": "http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf"}, {"name": "title", "value": "A Personal view of APL"}, {"name": "year", "value": "1991"}, {"name": "first", "value": "Kenneth E."}, {"name": "last", "value": "Iverson"}, {"name": "author-link", "value": "Kenneth E. Iverson"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "volume", "value": "30"}, {"name": "issue", "value": "4"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080227012149/http://www.research.ibm.com/journal/sj/304/ibmsj3004O.pdf"}, {"name": "archive-date", "value": "February 27, 2008"}, {"name": "doi", "value": "10.1147/sj.304.0582"}, {"name": "pages", "value": "582\u2013593"}]}, {"name": "ISBN", "values": [{"name": "1", "value": "0-471-10605-4"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Askoolum"}, {"name": "first", "value": "Ajay"}, {"name": "title", "value": "System Building with APL + Win"}, {"name": "date", "value": "August 2006"}, {"name": "publisher", "value": "Wiley"}, {"name": "isbn", "value": "978-0-470-03020-2"}]}, {"name": "cite journal ", "values": [{"name": "url", "value": "http://www.research.ibm.com/journal/sj/032/falkoff.pdf"}, {"name": "title", "value": "A Formal Description of System/360"}, {"name": "first1", "value": "Adin D."}, {"name": "last1", "value": "Falkoff"}, {"name": "first2", "value": "Kenneth E."}, {"name": "last2", "value": "Iverson"}, {"name": "author-link2", "value": "Kenneth E. Iverson"}, {"name": "first3", "value": "Edward H."}, {"name": "last3", "value": "Sussenguth"}, {"name": "author-link3", "value": "Edward H. Sussenguth"}, {"name": "journal", "value": "IBM Systems Journal"}, {"name": "volume", "value": "3"}, {"name": "issue", "value": "2"}, {"name": "year", "value": "1964"}, {"name": "archive-url", "value": "https://web.archive.org/web/20080227012111/http://www.research.ibm.com/journal/sj/032/falkoff.pdf"}, {"name": "archive-date", "value": "February 27, 2008"}, {"name": "doi", "value": "10.1147/sj.32.0198"}, {"name": "pages", "value": "198\u2013261"}]}, {"name": "Clarify", "values": [{"name": "date", "value": "June 2010"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "Banon"}, {"name": "first", "value": "Gerald Jean Francis"}, {"name": "title", "value": "Bases da Computacao Grafica"}, {"name": "publisher", "value": "Campus"}, {"name": "location", "value": "Rio de Janeiro"}, {"name": "year", "value": "1989"}, {"name": "page", "value": "141"}]}, {"name": "cite book ", "values": [{"name": "last", "value": "LePage"}, {"name": "first", "value": "Wilbur R."}, {"name": "title", "value": "Applied A.P.L. Programming"}, {"name": "publisher", "value": "Prentice Hall"}, {"name": "year", "value": "1978"}]}, {"name": "cite journal ", "values": [{"name": "title", "value": "OOPAL: Integrating Array Programming in ObjectOriented Programming"}, {"name": "journal", "value": "Proceeding OOPSLA '03 Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications"}, {"name": "date", "value": "November 2003"}, {"name": "last", "value": "Mougin"}, {"name": "first", "value": "Philippe"}, {"name": "last2", "value": "Ducasse"}, {"name": "first2", "value": "Stephane"}, {"name": "volume", "value": "38"}, {"name": "issue", "value": "11"}, {"name": "pages", "value": "65\u201377"}, {"name": "doi", "value": "10.1145/949343.949312"}, {"name": "url-status", "value": "dead"}, {"name": "archive-url", "value": "https://web.archive.org/web/20061114145417/http://www.fscript.org/documentation/OOPAL.pdf"}, {"name": "archive-date", "value": "November 14, 2006"}, {"name": "url", "value": "http://www.fscript.org/documentation/OOPAL.pdf"}]}, {"name": "cite book", "values": [{"name": "last", "value": "Dyalog Limited"}, {"name": "url", "value": "http://www.dyalog.dk/whatsnew/OO4APLERS.pdf"}, {"name": "archive-url", "value": "https://web.archive.org/web/20071004214341/http://www.dyalog.dk/whatsnew/OO4APLERS.pdf"}, {"name": "url-status", "value": "dead"}, {"name": "archive-date", "value": "October 4, 2007"}, {"name": "title", "value": "An Introduction to Object Oriented Programming For APL Programmers"}, {"name": "publisher", "value": "Dyalog Limited"}, {"name": "date", "value": "September 2006"}]}, {"name": "cite web ", "values": [{"name": "title", "value": "The APL Programming Language Source Code"}, {"name": "author-first", "value": "Len"}, {"name": "author-last", "value": "Shustek"}, {"name": "date", "value": "October 10, 2012"}, {"name": "publisher", "value": "[[Computer History Museum]] (CHM)"}, {"name": "url", "value": "http://www.computerhistory.org/atchm/the-apl-programming-language-source-code/#A-Taste-of-APL"}, {"name": "access-date", "value": "September 6, 2017"}, {"name": "url-status", "value": "live"}, {"name": "archive-url", "value": "https://web.archive.org/web/20170906205616/http://www.computerhistory.org/atchm/the-apl-programming-language-source-code/"}, {"name": "archive-date", "value": "September 6, 2017"}]}], "id": 40}, {"title": " Video ", "paragraphs": "* [https://www.youtube.com/watch?v=8kUQWuK1L4w The Origins of APL] - a 1974 talk show style interview with the original developers of APL.\n* [https://www.youtube.com/watch?v=_DTpQ4Kk2wA APL demonstration] - a 1975 live demonstration of APL by [[Robert Spence (engineer)|Professor Bob Spence]], [[Imperial College London]].\n* [https://www.youtube.com/watch?v=a9xAKttWgP4 Conway's Game Of Life in APL] - a 2009 tutorial by John Scholes of Dyalog Ltd. which implements [[Conway's Game of Life]] in a single line of APL.\n* [https://www.youtube.com/watch?v=ra_JyBCI4Xg 50 Years of APL] - a 2009 introduction to APL by Graeme Robertson.\n\n", "attributes": [], "id": 41}, {"title": " External links ", "paragraphs": "{{Commons category|APL (programming language)}}\n\n=== Online resources ===\n* [http://tryapl.org/ TryAPL.org], an online APL primer\n* [http://aplwiki.com/ APL Wiki]\n* {{Dmoz|Computers/Programming/Languages/APL|APL}}\n* [http://www.apl2c.de/home/Links/links.html APL2C], a source of links to APL compilers\n\n=== Providers ===\n* [https://www.ibm.com/us-en/marketplace/apl2 IBM APL2]\n* [http://www.dyalog.com/ Dyalog APL]\n* [http://www.dyalog.com/aplx.htm APLX]\n* [http://www.apl2000.com/ APL2000]\n* [http://www.nars2000.org/ NARS2000]\n* [https://www.gnu.org/software/apl/ GNU APL]\n* [http://sourceforge.net/p/openapl/wiki/Home/ OpenAPL]\n\n=== User groups and societies ===\n* [[Finland]]: [http://www.finnapl.fi/ Finnish APL Association (FinnAPL)]\n* [[France]]: [http://www.afapl.asso.fr/index.htm APL et J]\n* [[Germany]]: [https://apl-germany.de/ APL-Germany e.V.]\n* [[Japan]]: [http://japla.sakura.ne.jp/ Japan APL Association (JAPLA)]\n* [[Sweden]]: [http://swedapl.se/ Swedish APL User Group (SwedAPL)]\n* [[Switzerland]]: [https://swissinformatics.org/en/communities/sig/saug/ Swiss APL User Group (SAUG)]\n* [[United Kingdom]]: [http://www.britishaplassociation.co.uk/ The British APL Association]\n* [[United States]]: [[Association for Computing Machinery|ACM]] [http://sigapl.org/ SIGPLAN chapter on Array Programming Languages (SIGAPL)]\n\n{{APL programming language}}\n{{Programming languages}}\n{{ISO standards}}\n{{List of International Electrotechnical Commission standards}}\n\n[[Category:.NET programming languages]]\n[[Category:APL programming language family]]\n[[Category:Array programming languages]]\n[[Category:Command shells]]<!-- [[IBM 5100]], per a toggle switch on the front panel -->\n[[Category:Dynamic programming languages]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Functional languages]]\n[[Category:IBM software]]\n[[Category:Programming languages created in 1964]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Programming languages]]\n[[Category:1966 software]]", "attributes": [{"name": "Commons category", "values": [{"name": "1", "value": "APL (programming language)"}]}, {"name": "Dmoz", "values": [{"name": "1", "value": "Computers/Programming/Languages/APL"}, {"name": "2", "value": "APL"}]}], "id": 42}, {"title": " Online resources ", "paragraphs": "* [http://tryapl.org/ TryAPL.org], an online APL primer\n* [http://aplwiki.com/ APL Wiki]\n* {{Dmoz|Computers/Programming/Languages/APL|APL}}\n* [http://www.apl2c.de/home/Links/links.html APL2C], a source of links to APL compilers\n\n", "attributes": [{"name": "Dmoz", "values": [{"name": "1", "value": "Computers/Programming/Languages/APL"}, {"name": "2", "value": "APL"}]}], "id": 43}, {"title": " Providers ", "paragraphs": "* [https://www.ibm.com/us-en/marketplace/apl2 IBM APL2]\n* [http://www.dyalog.com/ Dyalog APL]\n* [http://www.dyalog.com/aplx.htm APLX]\n* [http://www.apl2000.com/ APL2000]\n* [http://www.nars2000.org/ NARS2000]\n* [https://www.gnu.org/software/apl/ GNU APL]\n* [http://sourceforge.net/p/openapl/wiki/Home/ OpenAPL]\n\n", "attributes": [], "id": 44}, {"title": " User groups and societies ", "paragraphs": "* [[Finland]]: [http://www.finnapl.fi/ Finnish APL Association (FinnAPL)]\n* [[France]]: [http://www.afapl.asso.fr/index.htm APL et J]\n* [[Germany]]: [https://apl-germany.de/ APL-Germany e.V.]\n* [[Japan]]: [http://japla.sakura.ne.jp/ Japan APL Association (JAPLA)]\n* [[Sweden]]: [http://swedapl.se/ Swedish APL User Group (SwedAPL)]\n* [[Switzerland]]: [https://swissinformatics.org/en/communities/sig/saug/ Swiss APL User Group (SAUG)]\n* [[United Kingdom]]: [http://www.britishaplassociation.co.uk/ The British APL Association]\n* [[United States]]: [[Association for Computing Machinery|ACM]] [http://sigapl.org/ SIGPLAN chapter on Array Programming Languages (SIGAPL)]\n\n{{APL programming language}}\n{{Programming languages}}\n{{ISO standards}}\n{{List of International Electrotechnical Commission standards}}\n\n[[Category:.NET programming languages]]\n[[Category:APL programming language family]]\n[[Category:Array programming languages]]\n[[Category:Command shells]]<!-- [[IBM 5100]], per a toggle switch on the front panel -->\n[[Category:Dynamic programming languages]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Functional languages]]\n[[Category:IBM software]]\n[[Category:Programming languages created in 1964]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Programming languages]]\n[[Category:1966 software]]", "attributes": [], "id": 45}]}